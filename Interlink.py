# main.py - Discord Bot with PostgreSQL + JSONBin.io for persistent token storage
import os
import json
import asyncio
import threading
import discord
import aiohttp
import requests
from discord.ext import commands
from flask import Flask, request
from dotenv import load_dotenv
from urllib.parse import urlparse
import time

# Try to import psycopg2, fallback to JSONBin if not available
try:
    import psycopg2
    HAS_PSYCOPG2 = True
    print("‚úÖ psycopg2 imported successfully")
except ImportError:
    HAS_PSYCOPG2 = False
    print("‚ö†Ô∏è WARNING: psycopg2 not available, using JSONBin.io storage only")

# --- LOAD ENVIRONMENT VARIABLES ---
load_dotenv()
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
CLIENT_ID = os.getenv('DISCORD_CLIENT_ID')
CLIENT_SECRET = os.getenv('DISCORD_CLIENT_SECRET')
DATABASE_URL = os.getenv('DATABASE_URL')

# JSONBin.io configuration
JSONBIN_API_KEY = os.getenv('JSONBIN_API_KEY')  # Th√™m v√†o .env file
JSONBIN_BIN_ID = os.getenv('JSONBIN_BIN_ID')    # Th√™m v√†o .env file

if not DISCORD_TOKEN:
    exit("L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN")
if not CLIENT_ID:
    exit("L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_CLIENT_ID")
if not CLIENT_SECRET:
    exit("L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_CLIENT_SECRET")

# Ki·ªÉm tra JSONBin config
if not JSONBIN_API_KEY or not JSONBIN_BIN_ID:
    print("‚ö†Ô∏è WARNING: JSONBin.io config not found, will create new bin if needed")

# --- RENDER CONFIGURATION ---
PORT = int(os.getenv('PORT', 5000))
RENDER_URL = os.getenv('RENDER_EXTERNAL_URL', f'http://127.0.0.1:{PORT}')
REDIRECT_URI = f'{RENDER_URL}/callback'

# --- JSONBIN.IO FUNCTIONS ---
class JSONBinStorage:
    def __init__(self):
        self.api_key = JSONBIN_API_KEY
        self.bin_id = JSONBIN_BIN_ID
        self.base_url = "https://api.jsonbin.io/v3"
        
    def _get_headers(self):
        """T·∫°o headers cho requests"""
        return {
            "Content-Type": "application/json",
            "X-Master-Key": self.api_key,
            "X-Access-Key": self.api_key
        }
    
    def create_bin(self, data=None):
        """T·∫°o bin m·ªõi n·∫øu ch∆∞a c√≥"""
        if data is None:
            data = {}
        
        try:
            response = requests.post(
                f"{self.base_url}/b",
                json=data,
                headers=self._get_headers()
            )
            
            if response.status_code == 200:
                result = response.json()
                self.bin_id = result['metadata']['id']
                print(f"‚úÖ Created new JSONBin: {self.bin_id}")
                print(f"üîë Add this to your .env: JSONBIN_BIN_ID={self.bin_id}")
                return self.bin_id
            else:
                print(f"‚ùå Failed to create bin: {response.text}")
                return None
        except Exception as e:
            print(f"‚ùå JSONBin create error: {e}")
            return None
    
    def read_data(self):
        """ƒê·ªçc d·ªØ li·ªáu t·ª´ JSONBin"""
        if not self.bin_id:
            print("‚ö†Ô∏è No bin ID, creating new bin...")
            self.create_bin()
            return {}
            
        try:
            response = requests.get(
                f"{self.base_url}/b/{self.bin_id}/latest",
                headers=self._get_headers()
            )
            
            if response.status_code == 200:
                data = response.json()
                return data.get('record', {})
            elif response.status_code == 404:
                print("‚ö†Ô∏è Bin not found, creating new one...")
                self.create_bin()
                return {}
            else:
                print(f"‚ùå Failed to read from JSONBin: {response.status_code}")
                return {}
        except Exception as e:
            print(f"‚ùå JSONBin read error: {e}")
            return {}
    
    def write_data(self, data):
        """Ghi d·ªØ li·ªáu v√†o JSONBin"""
        if not self.bin_id:
            print("‚ö†Ô∏è No bin ID, creating new bin...")
            if not self.create_bin(data):
                return False
        
        try:
            response = requests.put(
                f"{self.base_url}/b/{self.bin_id}",
                json=data,
                headers=self._get_headers()
            )
            
            if response.status_code == 200:
                print("‚úÖ Data saved to JSONBin successfully")
                return True
            else:
                print(f"‚ùå Failed to save to JSONBin: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå JSONBin write error: {e}")
            return False
    
    def get_user_token(self, user_id):
        """L·∫•y token c·ªßa user t·ª´ JSONBin"""
        data = self.read_data()
        user_data = data.get(str(user_id))
        
        if isinstance(user_data, dict):
            return user_data.get('access_token')
        return user_data
    
    def save_user_token(self, user_id, access_token, username=None):
        """L∆∞u token c·ªßa user v√†o JSONBin"""
        data = self.read_data()
        
        data[str(user_id)] = {
            'access_token': access_token,
            'username': username,
            'updated_at': str(time.time())
        }
        
        return self.write_data(data)

# Kh·ªüi t·∫°o JSONBin storage
jsonbin_storage = JSONBinStorage()

# --- DATABASE SETUP ---
def init_database():
    """Kh·ªüi t·∫°o database v√† t·∫°o b·∫£ng n·∫øu ch∆∞a c√≥"""
    if not DATABASE_URL or not HAS_PSYCOPG2:
        print("‚ö†Ô∏è WARNING: Kh√¥ng c√≥ DATABASE_URL ho·∫∑c psycopg2, s·ª≠ d·ª•ng JSONBin.io")
        return False
    
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()
        
        # T·∫°o b·∫£ng user_tokens n·∫øu ch∆∞a c√≥
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_tokens (
                user_id VARCHAR(50) PRIMARY KEY,
                access_token TEXT NOT NULL,
                username VARCHAR(100),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        cursor.close()
        conn.close()
        print("‚úÖ Database initialized successfully")
        return True
        
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        print("üîÑ Falling back to JSONBin.io storage")
        return False

# --- DATABASE FUNCTIONS ---
def get_db_connection():
    """T·∫°o connection t·ªõi database"""
    if DATABASE_URL and HAS_PSYCOPG2:
        try:
            return psycopg2.connect(DATABASE_URL, sslmode='require')
        except Exception as e:
            print(f"Database connection error: {e}")
            return None
    return None

def get_user_access_token_db(user_id: str):
    """L·∫•y access token t·ª´ database"""
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT access_token FROM user_tokens WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            return result[0] if result else None
        except Exception as e:
            print(f"Database error: {e}")
            if conn:
                conn.close()
    return None

def save_user_token_db(user_id: str, access_token: str, username: str = None):
    """L∆∞u access token v√†o database"""
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO user_tokens (user_id, access_token, username) 
                VALUES (%s, %s, %s)
                ON CONFLICT (user_id) 
                DO UPDATE SET 
                    access_token = EXCLUDED.access_token,
                    username = EXCLUDED.username,
                    updated_at = CURRENT_TIMESTAMP
            ''', (user_id, access_token, username))
            conn.commit()
            cursor.close()
            conn.close()
            print(f"‚úÖ Saved token for user {user_id} to database")
            return True
        except Exception as e:
            print(f"Database error: {e}")
            if conn:
                conn.close()
    return False

# --- FALLBACK JSON FUNCTIONS (kept for compatibility) ---
def get_user_access_token_json(user_id: str):
    """Backup: L·∫•y token t·ª´ file JSON"""
    try:
        with open('tokens.json', 'r') as f:
            tokens = json.load(f)
            data = tokens.get(str(user_id))
            if isinstance(data, dict):
                return data.get('access_token')
            return data
    except (FileNotFoundError, json.JSONDecodeError):
        return None

def save_user_token_json(user_id: str, access_token: str, username: str = None):
    """Backup: L∆∞u token v√†o file JSON"""
    try:
        try:
            with open('tokens.json', 'r') as f:
                tokens = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            tokens = {}
        
        tokens[user_id] = {
            'access_token': access_token,
            'username': username,
            'updated_at': str(time.time())
        }
        
        with open('tokens.json', 'w') as f:
            json.dump(tokens, f, indent=4)
        print(f"‚úÖ Saved token for user {user_id} to JSON file")
        return True
    except Exception as e:
        print(f"JSON file error: {e}")
        return False

# --- UNIFIED TOKEN FUNCTIONS ---
def get_user_access_token(user_id: int):
    """L·∫•y access token (∆Øu ti√™n: Database > JSONBin.io > JSON file)"""
    user_id_str = str(user_id)
    
    # Try database first
    token = get_user_access_token_db(user_id_str)
    if token:
        return token
    
    # Try JSONBin.io
    if JSONBIN_API_KEY:
        token = jsonbin_storage.get_user_token(user_id_str)
        if token:
            return token
    
    # Fallback to JSON file (for local development)
    return get_user_access_token_json(user_id_str)

def save_user_token(user_id: str, access_token: str, username: str = None):
    """L∆∞u access token (Database + JSONBin.io + JSON backup)"""
    success_db = save_user_token_db(user_id, access_token, username)
    success_jsonbin = False
    success_json = False
    
    # Try JSONBin.io
    if JSONBIN_API_KEY:
        success_jsonbin = jsonbin_storage.save_user_token(user_id, access_token, username)
    
    # Local JSON backup (for development)
    success_json = save_user_token_json(user_id, access_token, username)
    
    return success_db or success_jsonbin or success_json

# --- DISCORD BOT SETUP ---
intents = discord.Intents.default()
intents.members = True
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents, owner_id=1386710352426959011, help_command=None)

# --- FLASK WEB SERVER SETUP ---
app = Flask(__name__)

# --- UTILITY FUNCTIONS ---
async def add_member_to_guild(guild_id: int, user_id: int, access_token: str):
    """Th√™m member v√†o guild s·ª≠ d·ª•ng Discord API tr·ª±c ti·∫øp"""
    url = f"https://discord.com/api/v10/guilds/{guild_id}/members/{user_id}"
    headers = {
        "Authorization": f"Bot {DISCORD_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "access_token": access_token
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.put(url, headers=headers, json=data) as response:
            if response.status == 201:
                return True, "Th√™m th√†nh c√¥ng"
            elif response.status == 204:
                return True, "User ƒë√£ c√≥ trong server"
            else:
                error_text = await response.text()
                return False, f"HTTP {response.status}: {error_text}"
                
# --- INTERACTIVE UI COMPONENTS ---

# L·ªõp n√†y ƒë·ªãnh nghƒ©a giao di·ªán l·ª±a ch·ªçn server
class ServerSelectView(discord.ui.View):
    def __init__(self, author: discord.User, target_user: discord.User, guilds: list[discord.Guild]):
        super().__init__(timeout=180)  # Giao di·ªán s·∫Ω h·∫øt h·∫°n sau 180 gi√¢y
        self.author = author
        self.target_user = target_user
        self.guilds = guilds
        self.selected_guilds = []

        # T·∫°o menu th·∫£ xu·ªëng (Select)
        self.add_item(self.create_server_select())

    def create_server_select(self):
        # T·∫°o c√°c l·ª±a ch·ªçn cho menu, m·ªói l·ª±a ch·ªçn l√† m·ªôt server
        options = [
            discord.SelectOption(
                label=guild.name, 
                value=str(guild.id), 
                emoji='üñ•Ô∏è', 
                description=f"{guild.member_count} th√†nh vi√™n"
            )
            for guild in self.guilds
        ]
        
        server_select = discord.ui.Select(
            placeholder="Ch·ªçn c√°c server b·∫°n mu·ªën m·ªùi v√†o...",
            min_values=1,
            max_values=len(self.guilds), # Cho ph√©p ch·ªçn nhi·ªÅu server
            options=options
        )
        
        # G·∫Øn h√†m callback ƒë·ªÉ x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn
        server_select.callback = self.on_server_select
        return server_select

    async def on_server_select(self, interaction: discord.Interaction):
        # H√†m n√†y ƒë∆∞·ª£c g·ªçi khi c√≥ l·ª±a ch·ªçn trong menu
        # Ch·ªâ ch·ªß bot m·ªõi c√≥ th·ªÉ t∆∞∆°ng t√°c
        if interaction.user.id != self.author.id:
            await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn t∆∞∆°ng t√°c v·ªõi menu n√†y.", ephemeral=True)
            return

        # L∆∞u l·∫°i danh s√°ch ID c·ªßa c√°c server ƒë√£ ch·ªçn
        self.selected_guilds = [int(value) for value in interaction.data['values']]
        await interaction.response.defer() # B√°o cho Discord bi·∫øt bot ƒë√£ nh·∫≠n ƒë∆∞·ª£c t∆∞∆°ng t√°c

    @discord.ui.button(label="Summon", style=discord.ButtonStyle.green, emoji="‚ú®")
    async def summon_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # H√†m n√†y ƒë∆∞·ª£c g·ªçi khi n√∫t "Summon" ƒë∆∞·ª£c b·∫•m
        # Ch·ªâ ch·ªß bot m·ªõi c√≥ th·ªÉ t∆∞∆°ng t√°c
        if interaction.user.id != self.author.id:
            await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng n√∫t n√†y.", ephemeral=True)
            return
        
        if not self.selected_guilds:
            await interaction.response.send_message("B·∫°n ch∆∞a ch·ªçn server n√†o c·∫£!", ephemeral=True)
            return

        # V√¥ hi·ªáu h√≥a giao di·ªán sau khi b·∫•m
        for item in self.children:
            item.disabled = True
        await interaction.response.edit_message(view=self)
        
        await interaction.followup.send(f"‚úÖ ƒê√£ nh·∫≠n l·ªánh! B·∫Øt ƒë·∫ßu m·ªùi **{self.target_user.name}** v√†o **{len(self.selected_guilds)}** server ƒë√£ ch·ªçn...")

        # B·∫Øt ƒë·∫ßu qu√° tr√¨nh m·ªùi
        access_token = get_user_access_token(self.target_user.id)
        if not access_token:
            await interaction.followup.send(f"‚ùå Ng∆∞·ªùi d√πng **{self.target_user.name}** ch∆∞a ·ªßy quy·ªÅn cho bot.")
            return

        success_count = 0
        fail_count = 0
        
        for guild_id in self.selected_guilds:
            guild = bot.get_guild(guild_id)
            if not guild: continue
            
            try:
                success, message = await add_member_to_guild(guild.id, self.target_user.id, access_token)
                if success:
                    print(f"üëç Th√™m th√†nh c√¥ng {self.target_user.name} v√†o server {guild.name}")
                    success_count += 1
                else:
                    print(f"üëé L·ªói khi th√™m v√†o {guild.name}: {message}")
                    fail_count += 1
            except Exception as e:
                print(f"üëé L·ªói kh√¥ng x√°c ƒë·ªãnh khi th√™m v√†o {guild.name}: {e}")
                fail_count += 1
        
        embed = discord.Embed(title=f"üìä K·∫øt qu·∫£ m·ªùi {self.target_user.name}", color=0x00ff00)
        embed.add_field(name="‚úÖ Th√†nh c√¥ng", value=f"{success_count} server", inline=True)
        embed.add_field(name="‚ùå Th·∫•t b·∫°i", value=f"{fail_count} server", inline=True)
        await interaction.followup.send(embed=embed)
        
# --- DISCORD BOT EVENTS ---
@bot.event
async def on_ready():
    print(f'‚úÖ Bot ƒëƒÉng nh·∫≠p th√†nh c√¥ng: {bot.user.name}')
    print(f'üîó Web server: {RENDER_URL}')
    print(f'üîë Redirect URI: {REDIRECT_URI}')
    
    # Check storage status
    db_status = "Connected" if get_db_connection() else "Unavailable"
    jsonbin_status = "Connected" if JSONBIN_API_KEY else "Not configured"
    print(f'üíæ Database: {db_status}')
    print(f'üåê JSONBin.io: {jsonbin_status}')
    
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ ƒê√£ ƒë·ªìng b·ªô {len(synced)} l·ªánh slash.")
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªìng b·ªô l·ªánh slash: {e}")
    print('------')

# --- DISCORD BOT COMMANDS ---
@bot.command(name='ping', help='Ki·ªÉm tra ƒë·ªô tr·ªÖ k·∫øt n·ªëi c·ªßa bot.')
async def ping(ctx):
    latency = round(bot.latency * 1000)
    await ctx.send(f'üèì Pong! ƒê·ªô tr·ªÖ l√† {latency}ms.')

@bot.command(name='auth', help='L·∫•y link ·ªßy quy·ªÅn ƒë·ªÉ bot c√≥ th·ªÉ th√™m b·∫°n v√†o server.')
async def auth(ctx):
    auth_url = (
        f'https://discord.com/api/oauth2/authorize?client_id={CLIENT_ID}'
        f'&redirect_uri={REDIRECT_URI}&response_type=code&scope=identify%20guilds.join'
    )
    embed = discord.Embed(
        title="üîê ·ª¶y quy·ªÅn cho Bot",
        description=f"Nh·∫•p v√†o link b√™n d∆∞·ªõi ƒë·ªÉ cho ph√©p bot th√™m b·∫°n v√†o c√°c server:",
        color=0x00ff00
    )
    embed.add_field(name="üîó Link ·ªßy quy·ªÅn", value=f"[Nh·∫•p v√†o ƒë√¢y]({auth_url})", inline=False)
    embed.add_field(name="üìå L∆∞u √Ω", value="Token s·∫Ω ƒë∆∞·ª£c l∆∞u an to√†n v√†o cloud storage", inline=False)
    await ctx.send(embed=embed)

@bot.command(name='add_me', help='Th√™m b·∫°n v√†o t·∫•t c·∫£ c√°c server c·ªßa bot.')
async def add_me(ctx):
    user_id = ctx.author.id
    await ctx.send(f"‚úÖ B·∫Øt ƒë·∫ßu qu√° tr√¨nh th√™m {ctx.author.mention} v√†o c√°c server...")
    
    access_token = get_user_access_token(user_id)
    if not access_token:
        embed = discord.Embed(
            title="‚ùå Ch∆∞a ·ªßy quy·ªÅn",
            description="B·∫°n ch∆∞a ·ªßy quy·ªÅn cho bot. H√£y s·ª≠ d·ª•ng l·ªánh `!auth` tr∆∞·ªõc.",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        return
    
    success_count = 0
    fail_count = 0
    
    for guild in bot.guilds:
        try:
            member = guild.get_member(user_id)
            if member:
                print(f"üëç {ctx.author.name} ƒë√£ c√≥ trong server {guild.name}")
                success_count += 1
                continue
            
            success, message = await add_member_to_guild(guild.id, user_id, access_token)
            
            if success:
                print(f"üëç Th√™m th√†nh c√¥ng {ctx.author.name} v√†o server {guild.name}: {message}")
                success_count += 1
            else:
                print(f"üëé L·ªói khi th√™m v√†o {guild.name}: {message}")
                fail_count += 1
                
        except Exception as e:
            print(f"üëé L·ªói kh√¥ng x√°c ƒë·ªãnh khi th√™m v√†o {guild.name}: {e}")
            fail_count += 1
    
    embed = discord.Embed(title="üìä K·∫øt qu·∫£", color=0x00ff00)
    embed.add_field(name="‚úÖ Th√†nh c√¥ng", value=f"{success_count} server", inline=True)
    embed.add_field(name="‚ùå Th·∫•t b·∫°i", value=f"{fail_count} server", inline=True)
    await ctx.send(embed=embed)

@bot.command(name='check_token', help='Ki·ªÉm tra xem b·∫°n ƒë√£ ·ªßy quy·ªÅn ch∆∞a.')
async def check_token(ctx):
    user_id = ctx.author.id
    token = get_user_access_token(user_id)
    
    if token:
        embed = discord.Embed(
            title="‚úÖ ƒê√£ ·ªßy quy·ªÅn", 
            description="Bot ƒë√£ c√≥ token c·ªßa b·∫°n v√† c√≥ th·ªÉ th√™m b·∫°n v√†o server",
            color=0x00ff00
        )
        embed.add_field(name="üíæ L∆∞u tr·ªØ", value="Token ƒë∆∞·ª£c l∆∞u an to√†n tr√™n cloud", inline=False)
    else:
        embed = discord.Embed(
            title="‚ùå Ch∆∞a ·ªßy quy·ªÅn", 
            description="B·∫°n ch∆∞a ·ªßy quy·ªÅn cho bot. H√£y s·ª≠ d·ª•ng `!auth`",
            color=0xff0000
        )
    
    await ctx.send(embed=embed)

@bot.command(name='status', help='Ki·ªÉm tra tr·∫°ng th√°i bot v√† storage.')
async def status(ctx):
    # Test database connection
    db_connection = get_db_connection()
    db_status = "‚úÖ Connected" if db_connection else "‚ùå Unavailable"
    if db_connection:
        db_connection.close()
    
    # Test JSONBin connection
    jsonbin_status = "‚úÖ Configured" if JSONBIN_API_KEY else "‚ùå Not configured"
    
    embed = discord.Embed(title="ü§ñ Tr·∫°ng th√°i Bot", color=0x0099ff)
    embed.add_field(name="üìä Server", value=f"{len(bot.guilds)} server", inline=True)
    embed.add_field(name="üë• Ng∆∞·ªùi d√πng", value=f"{len(bot.users)} user", inline=True)
    embed.add_field(name="üíæ Database", value=db_status, inline=True)
    embed.add_field(name="üåê JSONBin.io", value=jsonbin_status, inline=True)
    embed.add_field(name="üåç Web Server", value=f"[Truy c·∫≠p]({RENDER_URL})", inline=False)
    await ctx.send(embed=embed)
    
@bot.command(name='force_add', help='(Ch·ªß bot) Th√™m m·ªôt ng∆∞·ªùi d√πng b·∫•t k·ª≥ v√†o t·∫•t c·∫£ c√°c server.')
@commands.is_owner()
async def force_add(ctx, user_to_add: discord.User):
    """
    L·ªánh ch·ªâ d√†nh cho ch·ªß bot ƒë·ªÉ th√™m m·ªôt ng∆∞·ªùi d√πng b·∫•t k·ª≥ v√†o c√°c server.
    C√°ch d√πng: !force_add <User_ID> ho·∫∑c !force_add @T√™nNg∆∞·ªùiD√πng
    """
    user_id = user_to_add.id
    await ctx.send(f"‚úÖ ƒê√£ nh·∫≠n l·ªánh! B·∫Øt ƒë·∫ßu qu√° tr√¨nh th√™m {user_to_add.mention} v√†o c√°c server...")
    
    access_token = get_user_access_token(user_id)
    if not access_token:
        embed = discord.Embed(
            title="‚ùå Ng∆∞·ªùi d√πng ch∆∞a ·ªßy quy·ªÅn",
            description=f"Ng∆∞·ªùi d√πng {user_to_add.mention} ch∆∞a ·ªßy quy·ªÅn cho bot. H√£y y√™u c·∫ßu h·ªç s·ª≠ d·ª•ng l·ªánh `!auth` tr∆∞·ªõc.",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        return
    
    success_count = 0
    fail_count = 0
    
    for guild in bot.guilds:
        try:
            member = guild.get_member(user_id)
            if member:
                print(f"üëç {user_to_add.name} ƒë√£ c√≥ trong server {guild.name}")
                success_count += 1
                continue
            
            success, message = await add_member_to_guild(guild.id, user_id, access_token)
            
            if success:
                print(f"üëç Th√™m th√†nh c√¥ng {user_to_add.name} v√†o server {guild.name}: {message}")
                success_count += 1
            else:
                print(f"üëé L·ªói khi th√™m v√†o {guild.name}: {message}")
                fail_count += 1
                
        except Exception as e:
            print(f"üëé L·ªói kh√¥ng x√°c ƒë·ªãnh khi th√™m v√†o {guild.name}: {e}")
            fail_count += 1
    
    embed = discord.Embed(title=f"üìä K·∫øt qu·∫£ th√™m {user_to_add.name}", color=0x00ff00)
    embed.add_field(name="‚úÖ Th√†nh c√¥ng", value=f"{success_count} server", inline=True)
    embed.add_field(name="‚ùå Th·∫•t b·∫°i", value=f"{fail_count} server", inline=True)
    await ctx.send(embed=embed)

@force_add.error
async def force_add_error(ctx, error):
    if isinstance(error, commands.NotOwner):
        await ctx.send("üö´ L·ªói: B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!")
    elif isinstance(error, commands.UserNotFound):
        await ctx.send(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.")
    else:
        print(f"L·ªói khi th·ª±c thi l·ªánh force_add: {error}")
        await ctx.send(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi th·ª±c thi l·ªánh. Vui l√≤ng ki·ªÉm tra console.")
        
@bot.command(name='invite', help='(Ch·ªß bot) M·ªü giao di·ªán ƒë·ªÉ ch·ªçn server m·ªùi ng∆∞·ªùi d√πng v√†o.')
@commands.is_owner()
async def invite(ctx, user_to_add: discord.User):
    """
    M·ªü m·ªôt giao di·ªán t∆∞∆°ng t√°c ƒë·ªÉ ch·ªçn server m·ªùi ng∆∞·ªùi d√πng.
    """
    if not user_to_add:
        await ctx.send("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†y.")
        return
        
    # T·∫°o giao di·ªán (View) v√† truy·ªÅn c√°c th√¥ng tin c·∫ßn thi·∫øt
    view = ServerSelectView(author=ctx.author, target_user=user_to_add, guilds=bot.guilds)
    
    embed = discord.Embed(
        title=f"üíå M·ªùi {user_to_add.name}",
        description="H√£y ch·ªçn c√°c server b·∫°n mu·ªën m·ªùi ng∆∞·ªùi n√†y v√†o t·ª´ menu b√™n d∆∞·ªõi, sau ƒë√≥ nh·∫•n n√∫t 'Summon'.",
        color=0x0099ff
    )
    embed.set_thumbnail(url=user_to_add.display_avatar.url)
    
    await ctx.send(embed=embed, view=view)

# --- SLASH COMMANDS ---
@bot.tree.command(name="help", description="Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c l·ªánh c·ªßa bot")
async def help_slash(interaction: discord.Interaction):
    embed = discord.Embed(
        title="ü§ñ Tr·ª£ gi√∫p v·ªÅ l·ªánh c·ªßa Interlink Bot",
        description="D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c l·ªánh b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng:",
        color=discord.Color.blue()
    )
    
    embed.add_field(name="`!auth`", value="G·ª≠i cho b·∫°n link ƒë·ªÉ ·ªßy quy·ªÅn cho bot.", inline=False)
    embed.add_field(name="`!add_me`", value="T·ª± th√™m ch√≠nh b·∫°n v√†o t·∫•t c·∫£ c√°c server sau khi ƒë√£ ·ªßy quy·ªÅn.", inline=False)
    embed.add_field(name="`!check_token`", value="Ki·ªÉm tra xem b·∫°n ƒë√£ ·ªßy quy·ªÅn cho bot hay ch∆∞a.", inline=False)
    embed.add_field(name="`!status`", value="Ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa bot v√† c√°c d·ªãch v·ª•.", inline=False)
    embed.add_field(name="`!invite <User ID/@User>`", value="**(Ch·ªß bot)** M·ªü giao di·ªán ƒë·ªÉ ch·ªçn server m·ªùi m·ªôt ng∆∞·ªùi d√πng.", inline=False)
    embed.add_field(name="`!force_add <User ID/@User>`", value="**(Ch·ªß bot)** Th√™m m·ªôt ng∆∞·ªùi d√πng v√†o T·∫§T C·∫¢ c√°c server.", inline=False)
    
    embed.set_footer(text="Bot ƒë∆∞·ª£c ph√°t tri·ªÉn v·ªõi s·ª± h·ªó tr·ª£ c·ªßa AI. Token ƒë∆∞·ª£c l∆∞u tr√™n cloud storage.")
    
    await interaction.response.send_message(embed=embed, ephemeral=True) # ephemeral=True ch·ªâ g·ª≠i cho ng∆∞·ªùi d√πng l·ªánh

@bot.command(name='help', help='Hi·ªÉn th·ªã b·∫£ng tr·ª£ gi√∫p v·ªÅ c√°c l·ªánh.')
async def help(ctx):
    embed = discord.Embed(
        title="ü§ñ B·∫£ng L·ªánh C·ªßa Interlink Bot",
        description="D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c l·ªánh b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng:",
        color=0x0099ff # B·∫°n c√≥ th·ªÉ ƒë·ªïi m√†u ·ªü ƒë√¢y
    )

    embed.add_field(name="`!auth`", value="G·ª≠i link ƒë·ªÉ b·∫°n ·ªßy quy·ªÅn, cho ph√©p bot th√™m b·∫°n v√†o server.", inline=False)
    embed.add_field(name="`!add_me`", value="T·ª± th√™m ch√≠nh b·∫°n v√†o t·∫•t c·∫£ c√°c server sau khi ƒë√£ ·ªßy quy·ªÅn.", inline=False)
    embed.add_field(name="`!check_token`", value="Ki·ªÉm tra xem b·∫°n ƒë√£ ·ªßy quy·ªÅn cho bot hay ch∆∞a.", inline=False)
    embed.add_field(name="`!status`", value="Ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa bot v√† storage systems.", inline=False)

    # Ch·ªâ hi·ªÉn th·ªã c√°c l·ªánh c·ªßa ch·ªß bot cho ch·ªß bot
    if await bot.is_owner(ctx.author):
        embed.add_field(name="üëë L·ªánh D√†nh Cho Ch·ªß Bot üëë", value="----------------------------------", inline=False)
        embed.add_field(name="`!invite <User ID/@User>`", value="M·ªü giao di·ªán ƒë·ªÉ ch·ªçn v√† m·ªùi m·ªôt ng∆∞·ªùi d√πng v√†o c√°c server.", inline=False)
        embed.add_field(name="`!force_add <User ID/@User>`", value="√âp th√™m m·ªôt ng∆∞·ªùi d√πng v√†o T·∫§T C·∫¢ c√°c server.", inline=False)

    embed.set_footer(text="Ch·ªçn m·ªôt l·ªánh v√† b·∫Øt ƒë·∫ßu! Token ƒë∆∞·ª£c l∆∞u tr√™n cloud storage.")
    embed.set_thumbnail(url=bot.user.display_avatar.url) # Th√™m avatar c·ªßa bot v√†o embed

    await ctx.send(embed=embed)

# --- ADDITIONAL JSONBIN MANAGEMENT COMMANDS ---
@bot.command(name='storage_info', help='(Ch·ªß bot) Hi·ªÉn th·ªã th√¥ng tin v·ªÅ storage systems.')
@commands.is_owner()
async def storage_info(ctx):
    """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ c√°c storage systems"""
    
    # Test Database
    db_connection = get_db_connection()
    if db_connection:
        try:
            cursor = db_connection.cursor()
            cursor.execute("SELECT COUNT(*) FROM user_tokens")
            db_count = cursor.fetchone()[0]
            cursor.close()
            db_connection.close()
            db_info = f"‚úÖ Connected ({db_count} tokens)"
        except:
            db_info = "‚ùå Connection Error"
    else:
        db_info = "‚ùå Not Available"
    
    # Test JSONBin
    if JSONBIN_API_KEY and JSONBIN_BIN_ID:
        try:
            data = jsonbin_storage.read_data()
            jsonbin_count = len(data) if isinstance(data, dict) else 0
            jsonbin_info = f"‚úÖ Connected ({jsonbin_count} tokens)"
        except:
            jsonbin_info = "‚ùå Connection Error"
    else:
        jsonbin_info = "‚ùå Not Configured"
    
    embed = discord.Embed(title="üíæ Storage Systems Info", color=0x0099ff)
    embed.add_field(name="üóÉÔ∏è PostgreSQL Database", value=db_info, inline=False)
    embed.add_field(name="üåê JSONBin.io", value=jsonbin_info, inline=False)
    
    if JSONBIN_BIN_ID:
        embed.add_field(name="üìã JSONBin Bin ID", value=f"`{JSONBIN_BIN_ID}`", inline=False)
    
    embed.add_field(name="‚ÑπÔ∏è Hierarchy", value="Database ‚Üí JSONBin.io ‚Üí Local JSON", inline=False)
    
    await ctx.send(embed=embed)

@bot.command(name='migrate_tokens', help='(Ch·ªß bot) Migrate tokens between storage systems.')
@commands.is_owner()
async def migrate_tokens(ctx, source: str = None, target: str = None):
    """
    Migrate tokens between storage systems
    Usage: !migrate_tokens <source> <target>
    Sources/Targets: db, jsonbin, json
    """
    
    if not source or not target:
        embed = discord.Embed(
            title="üì¶ Token Migration",
            description="Migrate tokens between storage systems",
            color=0x00ff00
        )
        embed.add_field(
            name="Usage", 
            value="`!migrate_tokens <source> <target>`\n\nValid options:\n‚Ä¢ `db` - PostgreSQL Database\n‚Ä¢ `jsonbin` - JSONBin.io\n‚Ä¢ `json` - Local JSON file", 
            inline=False
        )
        embed.add_field(
            name="Examples", 
            value="`!migrate_tokens json jsonbin`\n`!migrate_tokens db jsonbin`", 
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    await ctx.send(f"üîÑ Starting migration from {source} to {target}...")
    
    # Get source data
    source_data = {}
    if source == "db":
        conn = get_db_connection()
        if conn:
            try:
                cursor = conn.cursor()
                cursor.execute("SELECT user_id, access_token, username FROM user_tokens")
                rows = cursor.fetchall()
                for row in rows:
                    source_data[row[0]] = {
                        'access_token': row[1],
                        'username': row[2],
                        'updated_at': str(time.time())
                    }
                cursor.close()
                conn.close()
            except Exception as e:
                await ctx.send(f"‚ùå Database read error: {e}")
                return
    elif source == "jsonbin":
        try:
            source_data = jsonbin_storage.read_data()
        except Exception as e:
            await ctx.send(f"‚ùå JSONBin read error: {e}")
            return
    elif source == "json":
        try:
            with open('tokens.json', 'r') as f:
                source_data = json.load(f)
        except Exception as e:
            await ctx.send(f"‚ùå JSON file read error: {e}")
            return
    
    if not source_data:
        await ctx.send(f"‚ùå No data found in {source}")
        return
    
    # Write to target
    success_count = 0
    fail_count = 0
    
    for user_id, token_data in source_data.items():
        if isinstance(token_data, dict):
            access_token = token_data.get('access_token')
            username = token_data.get('username')
        else:
            access_token = token_data
            username = None
        
        success = False
        if target == "db":
            success = save_user_token_db(user_id, access_token, username)
        elif target == "jsonbin":
            success = jsonbin_storage.save_user_token(user_id, access_token, username)
        elif target == "json":
            success = save_user_token_json(user_id, access_token, username)
        
        if success:
            success_count += 1
        else:
            fail_count += 1
    
    embed = discord.Embed(title="üì¶ Migration Complete", color=0x00ff00)
    embed.add_field(name="‚úÖ Migrated", value=f"{success_count} tokens", inline=True)
    embed.add_field(name="‚ùå Failed", value=f"{fail_count} tokens", inline=True)
    embed.add_field(name="üìä Total", value=f"{len(source_data)} tokens found", inline=True)
    
    await ctx.send(embed=embed)
    
# --- FLASK WEB ROUTES ---
@app.route('/')
def index():
    auth_url = (
        f'https://discord.com/api/oauth2/authorize?client_id={CLIENT_ID}'
        f'&redirect_uri={REDIRECT_URI}&response_type=code&scope=identify%20guilds.join'
    )
    
    # Storage status for display
    db_status = "üü¢ Connected" if get_db_connection() else "üî¥ Unavailable"
    jsonbin_status = "üü¢ Configured" if JSONBIN_API_KEY else "üî¥ Not configured"
    
    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Discord Detective Bureau - Authorization Portal</title>
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Creepster&family=UnifrakturMaguntia&family=Griffy:wght@400&family=Nosifer&display=swap');
            
            :root {{
                --dark-fog: #1a1a1a;
                --deep-shadow: #0d0d0d;
                --blood-red: #8B0000;
                --old-gold: #DAA520;
                --mysterious-green: #2F4F2F;
                --london-fog: rgba(105, 105, 105, 0.3);
                --Victorian-brown: #654321;
            }}
            
            * {{
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }}
            
            body {{
                font-family: 'EB Garamond', serif;
                background: linear-gradient(135deg, var(--deep-shadow) 0%, var(--dark-fog) 30%, #2c2c2c 70%, var(--deep-shadow) 100%);
                color: #e0e0e0;
                min-height: 100vh;
                position: relative;
                overflow-x: hidden;
            }}
            
            /* Victorian wallpaper pattern */
            body::before {{
                content: '';
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-image: 
                    radial-gradient(circle at 25% 25%, var(--london-fog) 2px, transparent 2px),
                    radial-gradient(circle at 75% 75%, var(--london-fog) 1px, transparent 1px);
                background-size: 50px 50px;
                opacity: 0.1;
                z-index: -1;
            }}
            
            /* Fog effect */
            body::after {{
                content: '';
                position: fixed;
                bottom: -50px;
                left: -50px;
                width: 120%;
                height: 300px;
                background: linear-gradient(180deg, transparent 0%, var(--london-fog) 50%, rgba(105, 105, 105, 0.5) 100%);
                z-index: -1;
                animation: fogDrift 20s ease-in-out infinite;
            }}
            
            @keyframes fogDrift {{
                0%, 100% {{ transform: translateX(-20px); opacity: 0.3; }}
                50% {{ transform: translateX(20px); opacity: 0.6; }}
            }}
            
            .detective-header {{
                text-align: center;
                padding: 30px 20px;
                position: relative;
            }}
            
            .main-title {{
                font-family: 'UnifrakturMaguntia', cursive;
                font-size: 3.5em;
                color: var(--old-gold);
                text-shadow: 
                    3px 3px 0px var(--blood-red),
                    6px 6px 10px rgba(0, 0, 0, 0.8),
                    0px 0px 30px rgba(218, 165, 32, 0.3);
                margin-bottom: 10px;
                animation: mysterySway 4s ease-in-out infinite;
            }}
            
            @keyframes mysterySway {{
                0%, 100% {{ transform: rotate(-1deg) scale(1); }}
                50% {{ transform: rotate(1deg) scale(1.02); }}
            }}
            
            .subtitle {{
                font-family: 'Creepster', cursive;
                font-size: 1.5em;
                color: var(--blood-red);
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
                letter-spacing: 3px;
                animation: ghostlyGlow 3s ease-in-out infinite alternate;
            }}
            
            @keyframes ghostlyGlow {{
                from {{ text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8), 0 0 10px var(--blood-red); }}
                to {{ text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8), 0 0 20px var(--blood-red), 0 0 30px var(--blood-red); }}
            }}
            
            .container {{
                max-width: 900px;
                margin: 0 auto;
                padding: 0 20px;
            }}
            
            .evidence-box {{
                background: linear-gradient(145deg, rgba(20, 20, 20, 0.9), rgba(40, 40, 40, 0.9));
                border: 2px solid var(--old-gold);
                border-radius: 15px;
                padding: 30px;
                margin: 20px 0;
                box-shadow: 
                    inset 0 0 30px rgba(0, 0, 0, 0.5),
                    0 8px 25px rgba(0, 0, 0, 0.7),
                    0 0 50px rgba(218, 165, 32, 0.1);
                position: relative;
                backdrop-filter: blur(5px);
            }}
            
            .evidence-box::before {{
                content: '';
                position: absolute;
                top: -2px;
                left: -2px;
                right: -2px;
                bottom: -2px;
                background: linear-gradient(45deg, var(--old-gold), var(--blood-red), var(--old-gold));
                border-radius: 15px;
                z-index: -1;
                opacity: 0.3;
            }}
            
            .case-file-header {{
                font-family: 'Nosifer', cursive;
                font-size: 2em;
                color: var(--old-gold);
                text-align: center;
                margin-bottom: 20px;
                text-shadow: 
                    2px 2px 0px var(--blood-red),
                    4px 4px 8px rgba(0, 0, 0, 0.8);
                animation: ominousFlicker 2s ease-in-out infinite;
            }}
            
            @keyframes ominousFlicker {{
                0%, 94%, 100% {{ opacity: 1; }}
                95%, 97% {{ opacity: 0.8; }}
            }}
            
            .warning-stamp {{
                position: absolute;
                top: 10px;
                right: 20px;
                background: var(--blood-red);
                color: white;
                padding: 5px 15px;
                border-radius: 0;
                transform: rotate(12deg);
                font-family: 'EB Garamond', serif;
                font-weight: bold;
                font-size: 0.9em;
                box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.6);
                border: 2px dashed white;
            }}
            
            .authorize-btn {{
                display: inline-block;
                background: linear-gradient(145deg, var(--blood-red), #a00000, var(--blood-red));
                color: #ffffff;
                padding: 20px 40px;
                text-decoration: none;
                border-radius: 10px;
                font-family: 'EB Garamond', serif;
                font-size: 1.3em;
                font-weight: bold;
                letter-spacing: 2px;
                text-align: center;
                margin: 20px auto;
                display: block;
                width: fit-content;
                transition: all 0.4s ease;
                box-shadow: 
                    0 8px 25px rgba(139, 0, 0, 0.4),
                    inset 0 0 20px rgba(255, 255, 255, 0.1);
                text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
                position: relative;
                overflow: hidden;
            }}
            
            .authorize-btn::before {{
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
                transition: left 0.5s;
            }}
            
            .authorize-btn:hover::before {{
                left: 100%;
            }}
            
            .authorize-btn:hover {{
                background: linear-gradient(145deg, #a00000, var(--blood-red), #a00000);
                transform: translateY(-3px) scale(1.05);
                box-shadow: 
                    0 15px 35px rgba(139, 0, 0, 0.6),
                    inset 0 0 30px rgba(255, 255, 255, 0.2),
                    0 0 50px rgba(139, 0, 0, 0.3);
            }}
            
            .status-grid {{
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 20px;
                margin: 25px 0;
            }}
            
            .status-item {{
                background: linear-gradient(135deg, rgba(47, 79, 79, 0.3), rgba(20, 20, 20, 0.8));
                padding: 20px;
                border-radius: 10px;
                border: 1px solid var(--mysterious-green);
                text-align: center;
                position: relative;
                overflow: hidden;
            }}
            
            .status-item::before {{
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 2px;
                background: var(--old-gold);
                animation: scanLine 3s linear infinite;
            }}
            
            @keyframes scanLine {{
                0% {{ left: -100%; }}
                50% {{ left: 100%; }}
                100% {{ left: 100%; }}
            }}
            
            .status-label {{
                font-family: 'Creepster', cursive;
                color: var(--old-gold);
                font-size: 1.1em;
                margin-bottom: 8px;
                text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.8);
            }}
            
            .commands-section {{
                background: linear-gradient(135deg, rgba(0, 0, 0, 0.8), rgba(20, 20, 20, 0.9));
                border: 2px solid var(--Victorian-brown);
                border-radius: 10px;
                padding: 25px;
                margin: 25px 0;
                position: relative;
            }}
            
            .commands-section::before {{
                content: 'üìã';
                position: absolute;
                top: -15px;
                left: 20px;
                background: var(--Victorian-brown);
                padding: 5px 10px;
                border-radius: 5px;
                font-size: 1.5em;
            }}
            
            .command-title {{
                font-family: 'Nosifer', cursive;
                color: var(--old-gold);
                font-size: 1.5em;
                margin-bottom: 15px;
                text-align: center;
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
            }}
            
            .command-item {{
                margin: 10px 0;
                padding: 8px 0;
                border-bottom: 1px dotted var(--mysterious-green);
            }}
            
            .command-code {{
                font-family: 'Courier New', monospace;
                background: rgba(47, 79, 79, 0.3);
                color: var(--old-gold);
                padding: 3px 8px;
                border-radius: 4px;
                border: 1px solid var(--mysterious-green);
                font-weight: bold;
            }}
            
            .command-desc {{
                color: #cccccc;
                margin-left: 10px;
            }}
            
            .security-notice {{
                background: linear-gradient(135deg, rgba(139, 0, 0, 0.2), rgba(0, 0, 0, 0.8));
                border: 2px solid var(--blood-red);
                border-radius: 10px;
                padding: 20px;
                margin: 20px 0;
                position: relative;
            }}
            
            .security-notice::before {{
                content: 'üîí';
                position: absolute;
                top: -15px;
                left: 20px;
                background: var(--blood-red);
                padding: 5px 10px;
                border-radius: 5px;
                font-size: 1.5em;
            }}
            
            .security-title {{
                font-family: 'Creepster', cursive;
                color: var(--blood-red);
                font-size: 1.3em;
                margin-bottom: 10px;
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
            }}
            
            .security-list {{
                list-style: none;
                padding: 0;
            }}
            
            .security-list li {{
                margin: 8px 0;
                padding-left: 20px;
                position: relative;
            }}
            
            .security-list li::before {{
                content: 'üõ°Ô∏è';
                position: absolute;
                left: 0;
                top: 0;
            }}
            
            .footer-signature {{
                text-align: center;
                margin-top: 40px;
                padding: 20px;
                font-family: 'UnifrakturMaguntia', cursive;
                color: var(--old-gold);
                font-size: 1.1em;
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
                border-top: 2px dotted var(--Victorian-brown);
            }}
            
            /* Responsive design */
            @media (max-width: 768px) {{
                .main-title {{
                    font-size: 2.5em;
                }}
                
                .subtitle {{
                    font-size: 1.2em;
                    letter-spacing: 1px;
                }}
                
                .status-grid {{
                    grid-template-columns: 1fr;
                }}
                
                .evidence-box {{
                    padding: 20px;
                }}
                
                .authorize-btn {{
                    font-size: 1.1em;
                    padding: 15px 30px;
                }}
            }}
        </style>
    </head>
    <body>
        <div class="detective-header">
            <h1 class="main-title">DETECTIVE BUREAU</h1>
            <p class="subtitle">~ Discord Authorization Portal ~</p>
        </div>
        
        <div class="container">
            <div class="evidence-box">
                <div class="warning-stamp">CONFIDENTIAL</div>
                <h2 class="case-file-header">üïµÔ∏è CASE FILE: DISCORD INFILTRATION </h2>
                <p style="font-size: 1.2em; line-height: 1.6; text-align: center; margin-bottom: 20px;">
                    Ch√†o m·ª´ng, ƒêi·ªáp vi√™n. H√£y c·∫•p quy·ªÅn truy c·∫≠p Discord cho bot ƒë·ªÉ b·∫Øt ƒë·∫ßu nhi·ªám v·ª• th√¢m nh·∫≠p tr√™n c√°c m√°y ch·ªß.
                </p>
                
                <div class="status-grid">
                    <div class="status-item">
                        <div class="status-label">üóÉÔ∏è Evidence Vault</div>
                        <div>{db_status}</div>
                    </div>
                    <div class="status-item">
                        <div class="status-label">üåê Shadow Network</div>
                        <div>{jsonbin_status}</div>
                    </div>
                </div>
                
                <a href="{auth_url}" class="authorize-btn">
                    üîê ƒêƒÇNG NH·∫¨P 
                </a>
            </div>
            
            <div class="commands-section">
                <h3 class="command-title">üîç M·∫¨T L·ªÜNH HI·ªÜN TR∆Ø·ªúNG</h3>
                <div class="command-item">
                    <span class="command-code">!auth</span>
                    <span class="command-desc">- Y√™u c·∫ßu th√¥ng tin ·ªßy quy·ªÅn</span>
                </div>
                <div class="command-item">
                    <span class="command-code">!add_me</span>
                    <span class="command-desc">- Tri·ªÉn khai ƒëi·ªáp vi√™n ƒë·∫øn t·∫•t c·∫£ m√°y ch·ªß</span>
                </div>
                <div class="command-item">
                    <span class="command-code">!check_token</span>
                    <span class="command-desc">- X√°c minh tr·∫°ng th√°i gi·∫•y ph√©p</span>
                </div>
                <div class="command-item">
                    <span class="command-code">!status</span>
                    <span class="command-desc">- B√°o c√°o ch·∫©n ƒëo√°n h·ªá th·ªëng</span>
                </div>
                <hr style="border: 1px solid var(--mysterious-green); margin: 15px 0; opacity: 0.5;">
                <p style="text-align: center; color: var(--old-gold); font-family: 'Creepster', cursive; font-size: 1.1em;">
                    <strong>üï¥Ô∏è L·ªÜNH D√ÄNH RI√äNG CHO CH·ªà HUY üï¥Ô∏è</strong>
                </p>
                <div class="command-item">
                    <span class="command-code">!invite &lt;Target_ID&gt;</span>
                    <span class="command-desc">- M·ªü menu ƒë·ªÉ ch·ªçn server m·ªùi v√†o</span>
                </div>
                <div class="command-item">
                    <span class="command-code">!force_add &lt;Target_ID&gt;</span>
                    <span class="command-desc">- Giao th·ª©c tri·ªÉn khai h√†ng lo·∫°t kh·∫©n c·∫•p</span>
                </div>
            </div>
            
            <div class="security-notice">
                <h3 class="security-title">üîí GIAO TH·ª®C B·∫¢O M·∫¨T TUY·ªÜT ƒê·ªêI</h3>
                <ul class="security-list">
                    <li>M·ªçi th√¥ng tin ƒë∆∞·ª£c m√£ h√≥a chu·∫©n qu√¢n s·ª±</li>
                    <li>Kh√¥ng l∆∞u tr·ªØ m·∫≠t kh·∫©u Discord trong kho l∆∞u tr·ªØ</li>
                    <li>Quy·ªÅn truy c·∫≠p t·ªëi thi·ªÉu cho c√°c ho·∫°t ƒë·ªông b√≠ m·∫≠t</li>
                    <li>L∆∞u tr·ªØ ƒë√°m m√¢y an to√†n v·ªõi h·ªá th·ªëng d·ª± ph√≤ng</li>
                </ul>
            </div>
            
            <div class="footer-signature">
                ~ Department of Digital Mysteries ~<br>
                <small style="font-family: 'Griffy', cursive; font-size: 0.9em;">
                    "In shadows we trust, through code we infiltrate"
                </small>
            </div>
        </div>
    </body>
    </html>
    '''

@app.route('/callback')
def callback():
    code = request.args.get('code')
    if not code:
        return "‚ùå Error: Authorization code not received from Discord.", 400

    token_url = 'https://discord.com/api/v10/oauth2/token'
    payload = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': REDIRECT_URI,
    }
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}

    token_response = requests.post(token_url, data=payload, headers=headers)
    if token_response.status_code != 200:
        return f"‚ùå L·ªói khi l·∫•y token: {token_response.text}", 500
    
    token_data = token_response.json()
    access_token = token_data['access_token']

    user_info_url = 'https://discord.com/api/v10/users/@me'
    headers = {'Authorization': f'Bearer {access_token}'}
    user_response = requests.get(user_info_url, headers=headers)
    
    if user_response.status_code != 200:
        return "‚ùå L·ªói: Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.", 500

    user_data = user_response.json()
    user_id = user_data['id']
    username = user_data['username']

    # L∆∞u token v√†o c√°c storage systems
    success = save_user_token(user_id, access_token, username)
    
    # Determine storage info
    storage_methods = []
    if get_db_connection():
        storage_methods.append("Evidence Vault (PostgreSQL)")
    if JSONBIN_API_KEY:
        storage_methods.append("Shadow Network (JSONBin.io)")
    if not storage_methods:
        storage_methods.append("Local Archive (JSON)")
    
    storage_info = " + ".join(storage_methods)

    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Mission Accomplished - Detective Bureau</title>
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Creepster&family=EB+Garamond:ital,wght@0,400;1,400&family=Nosifer&family=UnifrakturMaguntia&display=swap');
            
            :root {{
                --dark-fog: #1a1a1a;
                --deep-shadow: #0d0d0d;
                --blood-red: #8B0000;
                --old-gold: #DAA520;
                --mysterious-green: #2F4F2F;
                --london-fog: rgba(105, 105, 105, 0.3);
                --Victorian-brown: #654321;
                --success-green: #006400;
            }}
            
            * {{
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }}
            
            body {{
                font-family: 'EB Garamond', serif;
                background: linear-gradient(135deg, var(--deep-shadow) 0%, var(--dark-fog) 30%, #2c2c2c 70%, var(--deep-shadow) 100%);
                color: #e0e0e0;
                min-height: 100vh;
                position: relative;
                overflow-x: hidden;
                display: flex;
                align-items: center;
                justify-content: center;
            }}
            
            /* Mysterious background pattern */
            body::before {{
                content: '';
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-image: 
                    radial-gradient(circle at 25% 25%, var(--london-fog) 2px, transparent 2px),
                    radial-gradient(circle at 75% 75%, var(--london-fog) 1px, transparent 1px);
                background-size: 50px 50px;
                opacity: 0.15;
                z-index: -1;
                animation: patternShift 30s linear infinite;
            }}
            
            @keyframes patternShift {{
                0% {{ transform: translateX(0) translateY(0); }}
                25% {{ transform: translateX(-25px) translateY(-25px); }}
                50% {{ transform: translateX(-50px) translateY(0); }}
                75% {{ transform: translateX(-25px) translateY(25px); }}
                100% {{ transform: translateX(0) translateY(0); }}
            }}
            
            /* Success fog effect */
            body::after {{
                content: '';
                position: fixed;
                bottom: -50px;
                left: -50px;
                width: 120%;
                height: 300px;
                background: linear-gradient(180deg, transparent 0%, rgba(0, 100, 0, 0.1) 50%, rgba(0, 100, 0, 0.2) 100%);
                z-index: -1;
                animation: successFogDrift 15s ease-in-out infinite;
            }}
            
            @keyframes successFogDrift {{
                0%, 100% {{ transform: translateX(-30px) translateY(10px); opacity: 0.2; }}
                50% {{ transform: translateX(30px) translateY(-10px); opacity: 0.4; }}
            }}
            
            .success-container {{
                background: linear-gradient(145deg, rgba(20, 20, 20, 0.95), rgba(40, 40, 40, 0.95));
                border: 3px solid var(--success-green);
                border-radius: 20px;
                padding: 50px;
                max-width: 700px;
                width: 90%;
                text-align: center;
                box-shadow: 
                    inset 0 0 50px rgba(0, 0, 0, 0.5),
                    0 20px 50px rgba(0, 0, 0, 0.8),
                    0 0 80px rgba(0, 100, 0, 0.2);
                position: relative;
                backdrop-filter: blur(10px);
            }}
            
            .success-container::before {{
                content: '';
                position: absolute;
                top: -3px;
                left: -3px;
                right: -3px;
                bottom: -3px;
                background: linear-gradient(45deg, var(--success-green), var(--old-gold), var(--success-green));
                border-radius: 20px;
                z-index: -1;
                opacity: 0.4;
                animation: borderGlow 3s ease-in-out infinite;
            }}
            
            @keyframes borderGlow {{
                0%, 100% {{ opacity: 0.4; }}
                50% {{ opacity: 0.8; }}
            }}
            
            .mission-stamp {{
                position: absolute;
                top: -20px;
                right: 30px;
                background: var(--success-green);
                color: white;
                padding: 10px 20px;
                border-radius: 0;
                transform: rotate(-8deg);
                font-family: 'EB Garamond', serif;
                font-weight: bold;
                font-size: 1.1em;
                box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.7);
                border: 3px dashed white;
                animation: stampPulse 2s ease-in-out infinite;
            }}
            
            @keyframes stampPulse {{
                0%, 100% {{ transform: rotate(-8deg) scale(1); }}
                50% {{ transform: rotate(-8deg) scale(1.05); }}
            }}
            
            .success-icon {{
                font-size: 5em;
                margin-bottom: 20px;
                animation: victoryPulse 2s ease-in-out infinite;
                color: var(--success-green);
                text-shadow: 0 0 30px var(--success-green);
            }}
            
            @keyframes victoryPulse {{
                0%, 100% {{ transform: scale(1) rotate(0deg); }}
                25% {{ transform: scale(1.1) rotate(-5deg); }}
                50% {{ transform: scale(1.2) rotate(0deg); }}
                75% {{ transform: scale(1.1) rotate(5deg); }}
            }}
            
            .success-title {{
                font-family: 'UnifrakturMaguntia', cursive;
                font-size: 3em;
                color: var(--old-gold);
                text-shadow: 
                    3px 3px 0px var(--success-green),
                    6px 6px 15px rgba(0, 0, 0, 0.8),
                    0px 0px 40px rgba(218, 165, 32, 0.5);
                margin-bottom: 15px;
                animation: titleGlow 3s ease-in-out infinite alternate;
            }}
            
            @keyframes titleGlow {{
                from {{ text-shadow: 3px 3px 0px var(--success-green), 6px 6px 15px rgba(0, 0, 0, 0.8), 0px 0px 40px rgba(218, 165, 32, 0.5); }}
                to {{ text-shadow: 3px 3px 0px var(--success-green), 6px 6px 15px rgba(0, 0, 0, 0.8), 0px 0px 60px rgba(218, 165, 32, 0.8); }}
            }}
            
            .agent-welcome {{
                font-family: 'Creepster', cursive;
                font-size: 1.8em;
                color: var(--success-green);
                margin-bottom: 30px;
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
                animation: welcomeFlicker 4s ease-in-out infinite;
            }}
            
            @keyframes welcomeFlicker {{
                0%, 90%, 100% {{ opacity: 1; }}
                95% {{ opacity: 0.8; }}
            }}
            
            .info-classified {{
                background: linear-gradient(135deg, rgba(0, 100, 0, 0.2), rgba(0, 0, 0, 0.8));
                border: 2px solid var(--success-green);
                border-radius: 15px;
                padding: 25px;
                margin: 25px 0;
                position: relative;
            }}
            
            .info-classified::before {{
                content: 'üíæ';
                position: absolute;
                top: -18px;
                left: 25px;
                background: var(--success-green);
                padding: 8px 12px;
                border-radius: 8px;
                font-size: 1.5em;
            }}
            
            .classified-header {{
                font-family: 'Nosifer', cursive;
                color: var(--old-gold);
                font-size: 1.4em;
                margin-bottom: 15px;
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
            }}
            
            .storage-info {{
                background: linear-gradient(135deg, rgba(47, 79, 79, 0.3), rgba(20, 20, 20, 0.9));
                padding: 20px;
                border-radius: 10px;
                border: 1px solid var(--mysterious-green);
                margin: 15px 0;
                position: relative;
                overflow: hidden;
            }}
            
            .storage-info::before {{
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 3px;
                background: var(--success-green);
                animation: secureTransfer 4s linear infinite;
            }}
            
            @keyframes secureTransfer {{
                0% {{ left: -100%; }}
                50% {{ left: 100%; }}
                100% {{ left: 100%; }}
            }}
            
            .next-steps {{
                background: linear-gradient(135deg, rgba(139, 0, 0, 0.2), rgba(0, 0, 0, 0.8));
                border: 2px solid var(--blood-red);
                border-radius: 15px;
                padding: 25px;
                margin: 25px 0;
                position: relative;
            }}
            
            .next-steps::before {{
                content: 'üöÄ';
                position: absolute;
                top: -18px;
                left: 25px;
                background: var(--blood-red);
                padding: 8px 12px;
                border-radius: 8px;
                font-size: 1.5em;
            }}
            
            .command-highlight {{
                font-family: 'Courier New', monospace;
                background: rgba(139, 0, 0, 0.3);
                color: var(--old-gold);
                padding: 5px 12px;
                border-radius: 6px;
                border: 2px solid var(--blood-red);
                font-weight: bold;
                font-size: 1.1em;
                display: inline-block;
                margin: 10px 5px;
                animation: commandPulse 3s ease-in-out infinite;
            }}
            
            @keyframes commandPulse {{
                0%, 100% {{ box-shadow: 0 0 10px rgba(139, 0, 0, 0.3); }}
                50% {{ box-shadow: 0 0 20px rgba(139, 0, 0, 0.6), inset 0 0 10px rgba(139, 0, 0, 0.2); }}
            }}
            
            .security-assurance {{
                background: linear-gradient(135deg, rgba(47, 79, 79, 0.2), rgba(0, 0, 0, 0.8));
                border: 2px solid var(--mysterious-green);
                border-radius: 15px;
                padding: 25px;
                margin: 25px 0;
                position: relative;
            }}
            
            .security-assurance::before {{
                content: 'üõ°Ô∏è';
                position: absolute;
                top: -18px;
                left: 25px;
                background: var(--mysterious-green);
                padding: 8px 12px;
                border-radius: 8px;
                font-size: 1.5em;
            }}
            
            .security-list {{
                list-style: none;
                padding: 0;
            }}
            
            .security-list li {{
                margin: 12px 0;
                padding-left: 25px;
                position: relative;
                color: #cccccc;
            }}
            
            .security-list li::before {{
                content: 'üîê';
                position: absolute;
                left: 0;
                top: 0;
            }}
            
            .signature-footer {{
                margin-top: 40px;
                padding-top: 25px;
                border-top: 3px dotted var(--Victorian-brown);
                font-family: 'UnifrakturMaguntia', cursive;
                color: var(--old-gold);
                font-size: 1.2em;
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
            }}
            
            /* Responsive design */
            @media (max-width: 768px) {{
                .success-container {{
                    padding: 30px;
                    width: 95%;
                }}
                
                .success-title {{
                    font-size: 2.2em;
                }}
                
                .agent-welcome {{
                    font-size: 1.4em;
                }}
                
                .success-icon {{
                    font-size: 4em;
                }}
            }}
        </style>
    </head>
    <body>
        <div class="success-container">
            <div class="mission-stamp">ƒê√É ·ª¶Y QUY·ªÄN</div>
            
            <div class="success-icon">‚úÖ</div>
            <h1 class="success-title">MISSION ACCOMPLISHED</h1>
            <p class="agent-welcome">Welcome to the Bureau, Agent <strong>{username}</strong>!</p>
            <p style="color: #b9bbbe; font-size: 1.1em; margin-top: -15px;">AGENT ID: <strong>{user_id}</strong></p>
            <div class="info-classified">
                <h3 class="classified-header">üîê ƒê√É B·∫¢O M·∫¨T TH√îNG TIN</h3>
                <div class="storage-info">
                    <strong>üìÅ L∆∞u tr·ªØ t·∫°i:</strong><br>
                    <span style="color: var(--success-green); font-weight: bold;">{storage_info}</span>
                </div>
            </div>
            
            <div class="next-steps">
                <h3 class="classified-header" style="color: var(--blood-red);">üéØ TRI·ªÇN KHAI T·ª®C TH·ªúI</h3>
                <p style="margin-bottom: 15px; color: #cccccc;">Gi·∫•y ph√©p c·ªßa b·∫°n ƒë√£ c√≥ hi·ªáu l·ª±c. Tri·ªÉn khai b·∫±ng l·ªánh:</p>
                <div class="command-highlight">!add_me</div>
                <p style="margin-top: 15px; color: #cccccc; font-size: 0.9em;">Th·ª±c thi l·ªánh n√†y ·ªü b·∫•t k·ª≥ k√™nh n√†o c√≥ s·ª± hi·ªán di·ªán c·ªßa bot gi√°m s√°t.</p>
            </div>
            
            <div class="security-assurance">
                <h3 class="classified-header" style="color: var(--mysterious-green);">üõ°Ô∏è GIAO TH·ª®C B·∫¢O M·∫¨T K√çCH HO·∫†T</h3>
                <ul class="security-list">
                    <li>Th√¥ng tin ƒë∆∞·ª£c m√£ h√≥a v·ªõi c·∫•p ƒë·ªô l∆∞·ª£ng t·ª≠</li>
                    <li>Kh√¥ng l∆∞u gi·ªØ m·∫≠t kh·∫©u Discord trong h·ªá th·ªëng</li>
                    <li>D·∫•u ch√¢n truy c·∫≠p t·ªëi thi·ªÉu cho ho·∫°t ƒë·ªông b√≠ m·∫≠t</li>
                    <li>H·ªá th·ªëng l∆∞u tr·ªØ ƒë√°m m√¢y an to√†n, ƒëa d·ª± ph√≤ng</li>
                </ul>
            </div>
            
            <div class="signature-footer">
                <p>~ Operation Successfully Initiated ~</p>
                <small style="font-family: 'Griffy', cursive; font-size: 0.8em; color: var(--mysterious-green);">
                    "Your digital identity is now part of our covert network"
                </small>
            </div>
        </div>
    </body>
    </html>
    '''

@app.route('/health')
def health():
    """Health check endpoint v·ªõi th√¥ng tin chi ti·∫øt"""
    db_connection = get_db_connection()
    db_status = db_connection is not None
    if db_connection:
        db_connection.close()
    
    # Test JSONBin connection
    jsonbin_status = False
    if JSONBIN_API_KEY and JSONBIN_BIN_ID:
        try:
            test_data = jsonbin_storage.read_data()
            jsonbin_status = True
        except:
            jsonbin_status = False
    
    return {
        "status": "ok", 
        "bot_connected": bot.is_ready(),
        "storage": {
            "database_connected": db_status,
            "jsonbin_configured": JSONBIN_API_KEY is not None,
            "jsonbin_working": jsonbin_status,
            "has_psycopg2": HAS_PSYCOPG2
        },
        "servers": len(bot.guilds) if bot.is_ready() else 0,
        "users": len(bot.users) if bot.is_ready() else 0
    }

# --- THREADING FUNCTION ---
def run_flask():
    """Ch·∫°y Flask server"""
    app.run(host='0.0.0.0', port=PORT, debug=False)

# --- MAIN EXECUTION ---
if __name__ == '__main__':
    print("üöÄ ƒêang kh·ªüi ƒë·ªông Discord Bot + Web Server...")
    print(f"üîß PORT: {PORT}")
    print(f"üîß Render URL: {RENDER_URL}")
    
    # Initialize database
    database_initialized = init_database()
    
    # Test JSONBin connection
    if JSONBIN_API_KEY:
        print("üåê Testing JSONBin.io connection...")
        try:
            test_data = jsonbin_storage.read_data()
            print(f"‚úÖ JSONBin.io connected successfully")
            if isinstance(test_data, dict) and len(test_data) > 0:
                print(f"üìä Found {len(test_data)} existing tokens in JSONBin")
        except Exception as e:
            print(f"‚ö†Ô∏è JSONBin.io connection issue: {e}")
    else:
        print("‚ö†Ô∏è JSONBin.io not configured")
    
    try:
        # Start Flask server in separate thread
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        print(f"üåê Web server started on port {PORT}")
        
        # Wait for Flask to start
        time.sleep(2)
        
        # Start Discord bot in main thread
        print("ü§ñ Starting Discord bot...")
        bot.run(DISCORD_TOKEN)
        
    except Exception as e:
        print(f"‚ùå Startup error: {e}")
        print("üîÑ Keeping web server alive...")
        while True:
            time.sleep(60)




