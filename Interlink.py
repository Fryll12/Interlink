# main.py - Discord Bot with PostgreSQL for persistent token storage
import os
import json
import asyncio
import threading
import discord
import aiohttp
import requests
from discord.ext import commands
from flask import Flask, request
from dotenv import load_dotenv
from urllib.parse import urlparse
import time

# Try to import psycopg2, fallback to JSON if not available
try:
    import psycopg2
    HAS_PSYCOPG2 = True
    print("‚úÖ psycopg2 imported successfully")
except ImportError:
    HAS_PSYCOPG2 = False
    print("‚ö†Ô∏è WARNING: psycopg2 not available, using JSON storage only")

# --- LOAD ENVIRONMENT VARIABLES ---
load_dotenv()
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
CLIENT_ID = os.getenv('DISCORD_CLIENT_ID')
CLIENT_SECRET = os.getenv('DISCORD_CLIENT_SECRET')
DATABASE_URL = os.getenv('DATABASE_URL')

if not DISCORD_TOKEN:
    exit("L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN")
if not CLIENT_ID:
    exit("L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_CLIENT_ID")
if not CLIENT_SECRET:
    exit("L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_CLIENT_SECRET")

# --- RENDER CONFIGURATION ---
PORT = int(os.getenv('PORT', 5000))
RENDER_URL = os.getenv('RENDER_EXTERNAL_URL', f'http://127.0.0.1:{PORT}')
REDIRECT_URI = f'{RENDER_URL}/callback'

# --- DATABASE SETUP ---
def init_database():
    """Kh·ªüi t·∫°o database v√† t·∫°o b·∫£ng n·∫øu ch∆∞a c√≥"""
    if not DATABASE_URL or not HAS_PSYCOPG2:
        print("‚ö†Ô∏è WARNING: Kh√¥ng c√≥ DATABASE_URL ho·∫∑c psycopg2, s·ª≠ d·ª•ng file JSON backup")
        return False
    
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()
        
        # T·∫°o b·∫£ng user_tokens n·∫øu ch∆∞a c√≥
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_tokens (
                user_id VARCHAR(50) PRIMARY KEY,
                access_token TEXT NOT NULL,
                username VARCHAR(100),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        cursor.close()
        conn.close()
        print("‚úÖ Database initialized successfully")
        return True
        
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        print("üîÑ Falling back to JSON file storage")
        return False

# --- DATABASE FUNCTIONS ---
def get_db_connection():
    """T·∫°o connection t·ªõi database"""
    if DATABASE_URL and HAS_PSYCOPG2:
        try:
            return psycopg2.connect(DATABASE_URL, sslmode='require')
        except Exception as e:
            print(f"Database connection error: {e}")
            return None
    return None

def get_user_access_token_db(user_id: str):
    """L·∫•y access token t·ª´ database"""
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT access_token FROM user_tokens WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            return result[0] if result else None
        except Exception as e:
            print(f"Database error: {e}")
            if conn:
                conn.close()
    return None

def save_user_token_db(user_id: str, access_token: str, username: str = None):
    """L∆∞u access token v√†o database"""
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO user_tokens (user_id, access_token, username) 
                VALUES (%s, %s, %s)
                ON CONFLICT (user_id) 
                DO UPDATE SET 
                    access_token = EXCLUDED.access_token,
                    username = EXCLUDED.username,
                    updated_at = CURRENT_TIMESTAMP
            ''', (user_id, access_token, username))
            conn.commit()
            cursor.close()
            conn.close()
            print(f"‚úÖ Saved token for user {user_id} to database")
            return True
        except Exception as e:
            print(f"Database error: {e}")
            if conn:
                conn.close()
    return False

# --- FALLBACK JSON FUNCTIONS ---
def get_user_access_token_json(user_id: str):
    """Backup: L·∫•y token t·ª´ file JSON"""
    try:
        with open('tokens.json', 'r') as f:
            tokens = json.load(f)
            data = tokens.get(str(user_id))
            if isinstance(data, dict):
                return data.get('access_token')
            return data
    except (FileNotFoundError, json.JSONDecodeError):
        return None

def save_user_token_json(user_id: str, access_token: str, username: str = None):
    """Backup: L∆∞u token v√†o file JSON"""
    try:
        try:
            with open('tokens.json', 'r') as f:
                tokens = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            tokens = {}
        
        tokens[user_id] = {
            'access_token': access_token,
            'username': username,
            'updated_at': str(time.time())
        }
        
        with open('tokens.json', 'w') as f:
            json.dump(tokens, f, indent=4)
        print(f"‚úÖ Saved token for user {user_id} to JSON file")
        return True
    except Exception as e:
        print(f"JSON file error: {e}")
        return False

# --- UNIFIED TOKEN FUNCTIONS ---
def get_user_access_token(user_id: int):
    """L·∫•y access token (∆∞u ti√™n database, fallback JSON)"""
    user_id_str = str(user_id)
    
    # Try database first
    token = get_user_access_token_db(user_id_str)
    if token:
        return token
    
    # Fallback to JSON
    return get_user_access_token_json(user_id_str)

def save_user_token(user_id: str, access_token: str, username: str = None):
    """L∆∞u access token (database + JSON backup)"""
    success_db = save_user_token_db(user_id, access_token, username)
    success_json = save_user_token_json(user_id, access_token, username)
    return success_db or success_json

# --- DISCORD BOT SETUP ---
intents = discord.Intents.default()
intents.members = True
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents, owner_id=1386710352426959011)

# --- FLASK WEB SERVER SETUP ---
app = Flask(__name__)

# --- UTILITY FUNCTIONS ---
async def add_member_to_guild(guild_id: int, user_id: int, access_token: str):
    """Th√™m member v√†o guild s·ª≠ d·ª•ng Discord API tr·ª±c ti·∫øp"""
    url = f"https://discord.com/api/v10/guilds/{guild_id}/members/{user_id}"
    headers = {
        "Authorization": f"Bot {DISCORD_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "access_token": access_token
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.put(url, headers=headers, json=data) as response:
            if response.status == 201:
                return True, "Th√™m th√†nh c√¥ng"
            elif response.status == 204:
                return True, "User ƒë√£ c√≥ trong server"
            else:
                error_text = await response.text()
                return False, f"HTTP {response.status}: {error_text}"
                
# --- INTERACTIVE UI COMPONENTS ---

# L·ªõp n√†y ƒë·ªãnh nghƒ©a giao di·ªán l·ª±a ch·ªçn server
class ServerSelectView(discord.ui.View):
    def __init__(self, author: discord.User, target_user: discord.User, guilds: list[discord.Guild]):
        super().__init__(timeout=180)  # Giao di·ªán s·∫Ω h·∫øt h·∫°n sau 180 gi√¢y
        self.author = author
        self.target_user = target_user
        self.guilds = guilds
        self.selected_guilds = []

        # T·∫°o menu th·∫£ xu·ªëng (Select)
        self.add_item(self.create_server_select())

    def create_server_select(self):
        # T·∫°o c√°c l·ª±a ch·ªçn cho menu, m·ªói l·ª±a ch·ªçn l√† m·ªôt server
        options = [
            discord.SelectOption(label=guild.name, value=str(guild.id), emoji='üñ•Ô∏è')
            for guild in self.guilds
        ]
        
        server_select = discord.ui.Select(
            placeholder="Ch·ªçn c√°c server b·∫°n mu·ªën m·ªùi v√†o...",
            min_values=1,
            max_values=len(self.guilds), # Cho ph√©p ch·ªçn nhi·ªÅu server
            options=options
        )
        
        # G·∫Øn h√†m callback ƒë·ªÉ x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn
        server_select.callback = self.on_server_select
        return server_select

    async def on_server_select(self, interaction: discord.Interaction):
        # H√†m n√†y ƒë∆∞·ª£c g·ªçi khi c√≥ l·ª±a ch·ªçn trong menu
        # Ch·ªâ ch·ªß bot m·ªõi c√≥ th·ªÉ t∆∞∆°ng t√°c
        if interaction.user.id != self.author.id:
            await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn t∆∞∆°ng t√°c v·ªõi menu n√†y.", ephemeral=True)
            return

        # L∆∞u l·∫°i danh s√°ch ID c·ªßa c√°c server ƒë√£ ch·ªçn
        self.selected_guilds = [int(value) for value in interaction.data['values']]
        await interaction.response.defer() # B√°o cho Discord bi·∫øt bot ƒë√£ nh·∫≠n ƒë∆∞·ª£c t∆∞∆°ng t√°c

    @discord.ui.button(label="Summon", style=discord.ButtonStyle.green, emoji="‚ú®")
    async def summon_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # H√†m n√†y ƒë∆∞·ª£c g·ªçi khi n√∫t "Summon" ƒë∆∞·ª£c b·∫•m
        # Ch·ªâ ch·ªß bot m·ªõi c√≥ th·ªÉ t∆∞∆°ng t√°c
        if interaction.user.id != self.author.id:
            await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng n√∫t n√†y.", ephemeral=True)
            return
        
        if not self.selected_guilds:
            await interaction.response.send_message("B·∫°n ch∆∞a ch·ªçn server n√†o c·∫£!", ephemeral=True)
            return

        # V√¥ hi·ªáu h√≥a giao di·ªán sau khi b·∫•m
        for item in self.children:
            item.disabled = True
        await interaction.response.edit_message(view=self)
        
        await interaction.followup.send(f"‚úÖ ƒê√£ nh·∫≠n l·ªánh! B·∫Øt ƒë·∫ßu m·ªùi **{self.target_user.name}** v√†o **{len(self.selected_guilds)}** server ƒë√£ ch·ªçn...")

        # B·∫Øt ƒë·∫ßu qu√° tr√¨nh m·ªùi
        access_token = get_user_access_token(self.target_user.id)
        if not access_token:
            await interaction.followup.send(f"‚ùå Ng∆∞·ªùi d√πng **{self.target_user.name}** ch∆∞a ·ªßy quy·ªÅn cho bot.")
            return

        success_count = 0
        fail_count = 0
        
        for guild_id in self.selected_guilds:
            guild = bot.get_guild(guild_id)
            if not guild: continue
            
            try:
                success, message = await add_member_to_guild(guild.id, self.target_user.id, access_token)
                if success:
                    print(f"üëç Th√™m th√†nh c√¥ng {self.target_user.name} v√†o server {guild.name}")
                    success_count += 1
                else:
                    print(f"üëé L·ªói khi th√™m v√†o {guild.name}: {message}")
                    fail_count += 1
            except Exception as e:
                print(f"üëé L·ªói kh√¥ng x√°c ƒë·ªãnh khi th√™m v√†o {guild.name}: {e}")
                fail_count += 1
        
        embed = discord.Embed(title=f"üìä K·∫øt qu·∫£ m·ªùi {self.target_user.name}", color=0x00ff00)
        embed.add_field(name="‚úÖ Th√†nh c√¥ng", value=f"{success_count} server", inline=True)
        embed.add_field(name="‚ùå Th·∫•t b·∫°i", value=f"{fail_count} server", inline=True)
        await interaction.followup.send(embed=embed)
        
# --- DISCORD BOT EVENTS ---
@bot.event
async def on_ready():
    print(f'‚úÖ Bot ƒëƒÉng nh·∫≠p th√†nh c√¥ng: {bot.user.name}')
    print(f'üîó Web server: {RENDER_URL}')
    print(f'üîë Redirect URI: {REDIRECT_URI}')
    db_status = "Connected" if get_db_connection() else "JSON Fallback"
    print(f'üíæ Database: {db_status}')
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ ƒê√£ ƒë·ªìng b·ªô {len(synced)} l·ªánh slash.")
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªìng b·ªô l·ªánh slash: {e}")
    print('------')

# --- DISCORD BOT COMMANDS ---
@bot.command(name='ping', help='Ki·ªÉm tra ƒë·ªô tr·ªÖ k·∫øt n·ªëi c·ªßa bot.')
async def ping(ctx):
    latency = round(bot.latency * 1000)
    await ctx.send(f'üèì Pong! ƒê·ªô tr·ªÖ l√† {latency}ms.')

@bot.command(name='auth', help='L·∫•y link ·ªßy quy·ªÅn ƒë·ªÉ bot c√≥ th·ªÉ th√™m b·∫°n v√†o server.')
async def auth(ctx):
    auth_url = (
        f'https://discord.com/api/oauth2/authorize?client_id={CLIENT_ID}'
        f'&redirect_uri={REDIRECT_URI}&response_type=code&scope=identify%20guilds.join'
    )
    embed = discord.Embed(
        title="üîê ·ª¶y quy·ªÅn cho Bot",
        description=f"Nh·∫•p v√†o link b√™n d∆∞·ªõi ƒë·ªÉ cho ph√©p bot th√™m b·∫°n v√†o c√°c server:",
        color=0x00ff00
    )
    embed.add_field(name="üîó Link ·ªßy quy·ªÅn", value=f"[Nh·∫•p v√†o ƒë√¢y]({auth_url})", inline=False)
    embed.add_field(name="üìù L∆∞u √Ω", value="Token s·∫Ω ƒë∆∞·ª£c l∆∞u an to√†n v√† kh√¥ng m·∫•t khi restart", inline=False)
    await ctx.send(embed=embed)

@bot.command(name='add_me', help='Th√™m b·∫°n v√†o t·∫•t c·∫£ c√°c server c·ªßa bot.')
async def add_me(ctx):
    user_id = ctx.author.id
    await ctx.send(f"‚úÖ B·∫Øt ƒë·∫ßu qu√° tr√¨nh th√™m {ctx.author.mention} v√†o c√°c server...")
    
    access_token = get_user_access_token(user_id)
    if not access_token:
        embed = discord.Embed(
            title="‚ùå Ch∆∞a ·ªßy quy·ªÅn",
            description="B·∫°n ch∆∞a ·ªßy quy·ªÅn cho bot. H√£y s·ª≠ d·ª•ng l·ªánh `!auth` tr∆∞·ªõc.",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        return
    
    success_count = 0
    fail_count = 0
    
    for guild in bot.guilds:
        try:
            member = guild.get_member(user_id)
            if member:
                print(f"üëç {ctx.author.name} ƒë√£ c√≥ trong server {guild.name}")
                success_count += 1
                continue
            
            success, message = await add_member_to_guild(guild.id, user_id, access_token)
            
            if success:
                print(f"üëç Th√™m th√†nh c√¥ng {ctx.author.name} v√†o server {guild.name}: {message}")
                success_count += 1
            else:
                print(f"üëé L·ªói khi th√™m v√†o {guild.name}: {message}")
                fail_count += 1
                
        except Exception as e:
            print(f"üëé L·ªói kh√¥ng x√°c ƒë·ªãnh khi th√™m v√†o {guild.name}: {e}")
            fail_count += 1
    
    embed = discord.Embed(title="üìä K·∫øt qu·∫£", color=0x00ff00)
    embed.add_field(name="‚úÖ Th√†nh c√¥ng", value=f"{success_count} server", inline=True)
    embed.add_field(name="‚ùå Th·∫•t b·∫°i", value=f"{fail_count} server", inline=True)
    await ctx.send(embed=embed)

@bot.command(name='check_token', help='Ki·ªÉm tra xem b·∫°n ƒë√£ ·ªßy quy·ªÅn ch∆∞a.')
async def check_token(ctx):
    user_id = ctx.author.id
    token = get_user_access_token(user_id)
    
    if token:
        embed = discord.Embed(
            title="‚úÖ ƒê√£ ·ªßy quy·ªÅn", 
            description="Bot ƒë√£ c√≥ token c·ªßa b·∫°n v√† c√≥ th·ªÉ th√™m b·∫°n v√†o server",
            color=0x00ff00
        )
    else:
        embed = discord.Embed(
            title="‚ùå Ch∆∞a ·ªßy quy·ªÅn", 
            description="B·∫°n ch∆∞a ·ªßy quy·ªÅn cho bot. H√£y s·ª≠ d·ª•ng `!auth`",
            color=0xff0000
        )
    
    await ctx.send(embed=embed)

@bot.command(name='status', help='Ki·ªÉm tra tr·∫°ng th√°i bot v√† database.')
async def status(ctx):
    # Test database connection
    db_connection = get_db_connection()
    db_status = "‚úÖ Connected" if db_connection else "‚ùå JSON Fallback"
    if db_connection:
        db_connection.close()
    
    embed = discord.Embed(title="ü§ñ Tr·∫°ng th√°i Bot", color=0x0099ff)
    embed.add_field(name="üìä Server", value=f"{len(bot.guilds)} server", inline=True)
    embed.add_field(name="üë• Ng∆∞·ªùi d√πng", value=f"{len(bot.users)} user", inline=True)
    embed.add_field(name="üíæ Database", value=db_status, inline=True)
    embed.add_field(name="üåê Web Server", value=f"[Truy c·∫≠p]({RENDER_URL})", inline=False)
    await ctx.send(embed=embed)
    
@bot.command(name='force_add', help='(Ch·ªß bot) Th√™m m·ªôt ng∆∞·ªùi d√πng b·∫•t k·ª≥ v√†o t·∫•t c·∫£ c√°c server.')
@commands.is_owner()
async def force_add(ctx, user_to_add: discord.User):
    """
    L·ªánh ch·ªâ d√†nh cho ch·ªß bot ƒë·ªÉ th√™m m·ªôt ng∆∞·ªùi d√πng b·∫•t k·ª≥ v√†o c√°c server.
    C√°ch d√πng: !force_add <User_ID> ho·∫∑c !force_add @T√™nNg∆∞·ªùiD√πng
    """
    user_id = user_to_add.id
    await ctx.send(f"‚úÖ ƒê√£ nh·∫≠n l·ªánh! B·∫Øt ƒë·∫ßu qu√° tr√¨nh th√™m {user_to_add.mention} v√†o c√°c server...")
    
    access_token = get_user_access_token(user_id)
    if not access_token:
        embed = discord.Embed(
            title="‚ùå Ng∆∞·ªùi d√πng ch∆∞a ·ªßy quy·ªÅn",
            description=f"Ng∆∞·ªùi d√πng {user_to_add.mention} ch∆∞a ·ªßy quy·ªÅn cho bot. H√£y y√™u c·∫ßu h·ªç s·ª≠ d·ª•ng l·ªánh `!auth` tr∆∞·ªõc.",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        return
    
    success_count = 0
    fail_count = 0
    
    for guild in bot.guilds:
        try:
            member = guild.get_member(user_id)
            if member:
                print(f"üëç {user_to_add.name} ƒë√£ c√≥ trong server {guild.name}")
                success_count += 1
                continue
            
            success, message = await add_member_to_guild(guild.id, user_id, access_token)
            
            if success:
                print(f"üëç Th√™m th√†nh c√¥ng {user_to_add.name} v√†o server {guild.name}: {message}")
                success_count += 1
            else:
                print(f"üëé L·ªói khi th√™m v√†o {guild.name}: {message}")
                fail_count += 1
                
        except Exception as e:
            print(f"üëé L·ªói kh√¥ng x√°c ƒë·ªãnh khi th√™m v√†o {guild.name}: {e}")
            fail_count += 1
    
    embed = discord.Embed(title=f"üìä K·∫øt qu·∫£ th√™m {user_to_add.name}", color=0x00ff00)
    embed.add_field(name="‚úÖ Th√†nh c√¥ng", value=f"{success_count} server", inline=True)
    embed.add_field(name="‚ùå Th·∫•t b·∫°i", value=f"{fail_count} server", inline=True)
    await ctx.send(embed=embed)

@force_add.error
async def force_add_error(ctx, error):
    if isinstance(error, commands.NotOwner):
        await ctx.send("üö´ L·ªói: B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!")
    elif isinstance(error, commands.UserNotFound):
        await ctx.send(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.")
    else:
        print(f"L·ªói khi th·ª±c thi l·ªánh force_add: {error}")
        await ctx.send(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi th·ª±c thi l·ªánh. Vui l√≤ng ki·ªÉm tra console.")
        
@bot.command(name='invite', help='(Ch·ªß bot) M·ªü giao di·ªán ƒë·ªÉ ch·ªçn server m·ªùi ng∆∞·ªùi d√πng v√†o.')
@commands.is_owner()
async def invite(ctx, user_to_add: discord.User):
    """
    M·ªü m·ªôt giao di·ªán t∆∞∆°ng t√°c ƒë·ªÉ ch·ªçn server m·ªùi ng∆∞·ªùi d√πng.
    """
    if not user_to_add:
        await ctx.send("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†y.")
        return
        
    # T·∫°o giao di·ªán (View) v√† truy·ªÅn c√°c th√¥ng tin c·∫ßn thi·∫øt
    view = ServerSelectView(author=ctx.author, target_user=user_to_add, guilds=bot.guilds)
    
    embed = discord.Embed(
        title=f"üíå M·ªùi {user_to_add.name}",
        description="H√£y ch·ªçn c√°c server b·∫°n mu·ªën m·ªùi ng∆∞·ªùi n√†y v√†o t·ª´ menu b√™n d∆∞·ªõi, sau ƒë√≥ nh·∫•n n√∫t 'Summon'.",
        color=0x0099ff
    )
    embed.set_thumbnail(url=user_to_add.display_avatar.url)
    
    await ctx.send(embed=embed, view=view)

# --- SLASH COMMANDS ---
@bot.tree.command(name="help", description="Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c l·ªánh c·ªßa bot")
async def help_slash(interaction: discord.Interaction):
    embed = discord.Embed(
        title="ü§ñ Tr·ª£ gi√∫p v·ªÅ l·ªánh c·ªßa Interlink Bot",
        description="D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c l·ªánh b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng:",
        color=discord.Color.blue()
    )
    
    embed.add_field(name="`!auth`", value="G·ª≠i cho b·∫°n link ƒë·ªÉ ·ªßy quy·ªÅn cho bot.", inline=False)
    embed.add_field(name="`!add_me`", value="T·ª± th√™m ch√≠nh b·∫°n v√†o t·∫•t c·∫£ c√°c server sau khi ƒë√£ ·ªßy quy·ªÅn.", inline=False)
    embed.add_field(name="`!check_token`", value="Ki·ªÉm tra xem b·∫°n ƒë√£ ·ªßy quy·ªÅn cho bot hay ch∆∞a.", inline=False)
    embed.add_field(name="`!status`", value="Ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa bot v√† c√°c d·ªãch v·ª•.", inline=False)
    embed.add_field(name="`!invite <User ID/@User>`", value="**(Ch·ªß bot)** M·ªü giao di·ªán ƒë·ªÉ ch·ªçn server m·ªùi m·ªôt ng∆∞·ªùi d√πng.", inline=False)
    embed.add_field(name="`!force_add <User ID/@User>`", value="**(Ch·ªß bot)** Th√™m m·ªôt ng∆∞·ªùi d√πng v√†o T·∫§T C·∫¢ c√°c server.", inline=False)
    
    embed.set_footer(text="Bot ƒë∆∞·ª£c ph√°t tri·ªÉn v·ªõi s·ª± h·ªó tr·ª£ c·ªßa AI.")
    
    await interaction.response.send_message(embed=embed, ephemeral=True) # ephemeral=True ch·ªâ g·ª≠i cho ng∆∞·ªùi d√πng l·ªánh
    
# --- FLASK WEB ROUTES ---
@app.route('/')
def index():
    auth_url = (
        f'https://discord.com/api/oauth2/authorize?client_id={CLIENT_ID}'
        f'&redirect_uri={REDIRECT_URI}&response_type=code&scope=identify%20guilds.join'
    )
    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Discord Bot Authorization</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                text-align: center;
                padding: 50px;
            }}
            .container {{
                background: rgba(255, 255, 255, 0.1);
                border-radius: 15px;
                padding: 30px;
                max-width: 600px;
                margin: 0 auto;
            }}
            .btn {{
                background: #7289da;
                color: white;
                padding: 15px 30px;
                border: none;
                border-radius: 5px;
                font-size: 18px;
                text-decoration: none;
                display: inline-block;
                margin: 20px;
                transition: background 0.3s;
            }}
            .btn:hover {{
                background: #5865f2;
            }}
            .info {{
                background: rgba(255, 255, 255, 0.05);
                border-radius: 10px;
                padding: 15px;
                margin: 20px 0;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü§ñ Discord Bot Authorization</h1>
            <p>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng ·ªßy quy·ªÅn Discord Bot!</p>
            
            <div class="info">
                <h3>üíæ Persistent Storage</h3>
                <p>Token c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c l∆∞u an to√†n v√† kh√¥ng b·ªã m·∫•t khi restart service</p>
            </div>
            
            <a href="{auth_url}" class="btn">üîê ƒêƒÉng nh·∫≠p v·ªõi Discord</a>
            
            <div class="info">
                <h3>üìã C√°c l·ªánh bot:</h3>
                <p><code>!force_add &lt;User_ID&gt;</code> - (Ch·ªß bot) Th√™m ng∆∞·ªùi d√πng b·∫•t k·ª≥</p>
                <p><code>!auth</code> - L·∫•y link ·ªßy quy·ªÅn</p>
                <p><code>!add_me</code> - Th√™m b·∫°n v√†o server</p>
                <p><code>!check_token</code> - Ki·ªÉm tra tr·∫°ng th√°i token</p>
                <p><code>!status</code> - Tr·∫°ng th√°i bot</p>
            </div>
        </div>
    </body>
    </html>
    '''

@app.route('/callback')
def callback():
    code = request.args.get('code')
    if not code:
        return "‚ùå L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ ·ªßy quy·ªÅn t·ª´ Discord.", 400

    token_url = 'https://discord.com/api/v10/oauth2/token'
    payload = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': REDIRECT_URI,
    }
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}

    token_response = requests.post(token_url, data=payload, headers=headers)
    if token_response.status_code != 200:
        return f"‚ùå L·ªói khi l·∫•y token: {token_response.text}", 500
    
    token_data = token_response.json()
    access_token = token_data['access_token']

    user_info_url = 'https://discord.com/api/v10/users/@me'
    headers = {'Authorization': f'Bearer {access_token}'}
    user_response = requests.get(user_info_url, headers=headers)
    
    if user_response.status_code != 200:
        return "‚ùå L·ªói: Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.", 500

    user_data = user_response.json()
    user_id = user_data['id']
    username = user_data['username']

    # L∆∞u token v√†o database + JSON backup
    success = save_user_token(user_id, access_token, username)
    storage_info = "database v√† file backup" if success else "ch·ªâ file backup"

    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>·ª¶y quy·ªÅn th√†nh c√¥ng!</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                text-align: center;
                padding: 50px;
            }}
            .container {{
                background: rgba(255, 255, 255, 0.1);
                border-radius: 15px;
                padding: 30px;
                max-width: 600px;
                margin: 0 auto;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>‚úÖ Th√†nh c√¥ng!</h1>
            <p>C·∫£m ∆°n <strong>{username}</strong>!</p>
            <p>üéâ Token ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o {storage_info}</p>
            <p>üìù S·ª≠ d·ª•ng <code>!add_me</code> trong Discord ƒë·ªÉ v√†o server</p>
            <p>üîí Token s·∫Ω kh√¥ng b·ªã m·∫•t khi service restart</p>
        </div>
    </body>
    </html>
    '''

@app.route('/health')
def health():
    """Health check endpoint"""
    db_connection = get_db_connection()
    db_status = db_connection is not None
    if db_connection:
        db_connection.close()
    
    return {
        "status": "ok", 
        "bot_connected": bot.is_ready(),
        "database_connected": db_status,
        "has_psycopg2": HAS_PSYCOPG2
    }

# --- THREADING FUNCTION ---
def run_flask():
    """Ch·∫°y Flask server"""
    app.run(host='0.0.0.0', port=PORT, debug=False)

# --- MAIN EXECUTION ---
if __name__ == '__main__':
    print("üöÄ ƒêang kh·ªüi ƒë·ªông Discord Bot + Web Server...")
    print(f"üîß PORT: {PORT}")
    print(f"üîß Render URL: {RENDER_URL}")
    
    # Initialize database
    database_initialized = init_database()
    
    try:
        # Start Flask server in separate thread
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        print(f"üåê Web server started on port {PORT}")
        
        # Wait for Flask to start
        time.sleep(2)
        
        # Start Discord bot in main thread
        print("ü§ñ Starting Discord bot...")
        bot.run(DISCORD_TOKEN)
        
    except Exception as e:
        print(f"‚ùå Startup error: {e}")
        print("üîÑ Keeping web server alive...")
        while True:
            time.sleep(60)


