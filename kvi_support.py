# === KVI SUPPORT MODULE FOR INTERLINK BOT (FINAL VERSION) ===
import discord
import re
import os
import asyncio
import json
from typing import Optional, List, Dict
from openai import AsyncOpenAI

# C·∫•u h√¨nh
KARUTA_ID = 646937666251915264
KVI_CHANNELS_STR = os.getenv('KVI_CHANNELS', '')
KVI_CHANNELS = [int(ch.strip()) for ch in KVI_CHANNELS_STR.split(',') if ch.strip().isdigit()]
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# Tr·∫°ng th√°i theo d√µi KVI cho t·ª´ng k√™nh
kvi_sessions = {}

class KVIHelper:
    def __init__(self, bot):
        self.bot = bot
        if OPENAI_API_KEY:
            self.ai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
        else:
            self.ai_client = None
            print("‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng c√≥ OpenAI API key. Bot s·∫Ω ch·∫°y ·ªü ch·∫ø ƒë·ªô g·ª£i √Ω ng·∫´u nhi√™n.")

    async def parse_karuta_embed(self, embed) -> Optional[Dict]:
        """Ph√¢n t√≠ch embed c·ªßa Karuta ƒë·ªÉ l·∫•y th√¥ng tin KVI"""
        description = embed.description or ""
        
        char_match = re.search(r"Character ¬∑ \*\*([^\*]+)\*\*", description)
        character_name = char_match.group(1).strip() if char_match else None
        
        question_match = re.search(r'"([^"]*)"', description)
        question = question_match.group(1).strip() if question_match else None
        
        choices = []
        choice_lines = re.findall(r'^\dÔ∏è‚É£\s+(.+)$', description, re.MULTILINE)
        for i, choice in enumerate(choice_lines, 1):
            choices.append({"number": i, "text": choice.strip()})
        
        if not all([character_name, question, choices]):
            return None
            
        print(f"‚úÖ Ph√¢n t√≠ch th√†nh c√¥ng: Nh√¢n v·∫≠t {character_name}")
        return {
            "character": character_name,
            "question": question,
            "choices": choices,
        }

    async def analyze_with_ai(self, character: str, question: str, choices: List[Dict]) -> Optional[Dict]:
        """S·ª≠ d·ª•ng AI ƒë·ªÉ ph√¢n t√≠ch ho·∫∑c fallback sang ch·∫ø ƒë·ªô ng·∫´u nhi√™n."""
        
        # --- Ch·∫ø ƒë·ªô AI th·∫≠t (khi c√≥ API key) ---
        if self.ai_client:
            try:
                choices_text = "\n".join([f"{choice['number']}. {choice['text']}" for choice in choices])
                prompt = f"""
                You are an expert anime/manga character analyst.
                Character: {character}
                Question: "{question}"
                Choices:
                {choices_text}
                Analyze and respond ONLY with a valid JSON object in the format:
                {{"analysis": "brief analysis", "percentages": [{{"choice": 1, "percentage": X}}, {{"choice": 2, "percentage": Y}}]}}
                """

                print("[INTERLINK KVI] ƒêang ph√¢n t√≠ch v·ªõi OpenAI...")
                response = await self.ai_client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "You are an expert anime character analyst. Respond accurately in the requested JSON format."},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=500,
                    temperature=0.7
                )
                
                result_text = response.choices[0].message.content.strip()
                result_json = json.loads(result_text)
                print(f"‚úÖ [OpenAI] Ph√¢n t√≠ch th√†nh c√¥ng cho {character}")
                return result_json
            except Exception as e:
                print(f"‚ùå [OpenAI] L·ªói API: {e}. Chuy·ªÉn sang ch·∫ø ƒë·ªô ng·∫´u nhi√™n.")
        
        # --- Ch·∫ø ƒë·ªô mi·ªÖn ph√≠ (khi kh√¥ng c√≥ API key ho·∫∑c API l·ªói) ---
        print("‚ö†Ô∏è Chuy·ªÉn sang ch·∫ø ƒë·ªô g·ª£i √Ω ng·∫´u nhi√™n (MI·ªÑN PH√ç).")
        import random
        percentages_list = []
        num_choices = len(choices)
        remaining = 100
        for i in range(num_choices - 1):
            p = random.randint(1, remaining - (num_choices - 1 - i))
            percentages_list.append(p)
            remaining -= p
        percentages_list.append(remaining)
        random.shuffle(percentages_list)

        return {
            "analysis": "Ch·∫ø ƒë·ªô mi·ªÖn ph√≠: G·ª£i √Ω ƒë∆∞·ª£c t·∫°o ng·∫´u nhi√™n.",
            "percentages": [{"choice": c["number"], "percentage": p} for c, p in zip(choices, percentages_list)]
        }

    async def create_suggestion_embed(self, kvi_data: Dict, ai_result: Dict) -> discord.Embed:
        """T·∫°o embed g·ª£i √Ω."""
        embed = discord.Embed(title="ü§ñ Interlink KVI Helper", color=0x00ff88)
        
        description_lines = [
            f"**Character:** {kvi_data['character']}",
            f"**Question:** \"{kvi_data['question']}\"",
            "",
            "**AI Analysis:**",
            ai_result.get('analysis', 'ƒêang ph√¢n t√≠ch...'),
            "",
            "**Suggestions:**"
        ]
        
        percentages = sorted(ai_result.get('percentages', []), key=lambda x: x['percentage'], reverse=True)
        
        for item in percentages:
            choice_num = item['choice']
            percentage = item['percentage']
            reasoning = item.get('reasoning', '')
            
            emoji = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£'][choice_num - 1]
            choice_text = next((c['text'] for c in kvi_data['choices'] if c['number'] == choice_num), "")
            
            line = f"{emoji} **{percentage}%** - {choice_text}"
            if reasoning:
                line += f"\n  ‚Ü≥ *{reasoning}*"
            description_lines.append(line)
            
        embed.description = "\n".join(description_lines)
        embed.set_footer(text="Powered by Interlink AI")
        return embed

    async def handle_kvi_message(self, message):
        """X·ª≠ l√Ω tin nh·∫Øn KVI t·ª´ Karuta."""
        if (message.author.id != KARUTA_ID or 
            message.channel.id not in KVI_CHANNELS or 
            not message.embeds):
            return

        embed = message.embeds[0]
        description = embed.description or ""
        
        if "Your Affection Rating has" in description or "1Ô∏è‚É£" not in description:
            return

        session_key = f"{message.channel.id}_{message.id}"
        if session_key in kvi_sessions:
            return
        
        kvi_sessions[session_key] = True

        print(f"\n[INTERLINK KVI] Ph√°t hi·ªán c√¢u h·ªèi KVI trong k√™nh {message.channel.id}")
        
        kvi_data = await self.parse_karuta_embed(embed)
        if not kvi_data:
            return
            
        ai_result = await self.analyze_with_ai(kvi_data["character"], kvi_data["question"], kvi_data["choices"])
        if not ai_result:
            return
            
        suggestion_embed = await self.create_suggestion_embed(kvi_data, ai_result)
        try:
            await message.channel.send(embed=suggestion_embed)
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i embed g·ª£i √Ω: {e}")
