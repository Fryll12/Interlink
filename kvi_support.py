# === KVI SUPPORT MODULE FOR INTERLINK BOT ===
import discord
import re
import os
import asyncio
from typing import Optional, List, Tuple, Dict
import google.generativeai as genai
import aiohttp
import json

# C·∫•u h√¨nh
KARUTA_ID = 646937666251915264
KVI_CHANNELS = os.getenv('KVI_CHANNELS', '').split(',')  # Nh·∫≠p nhi·ªÅu k√™nh c√°ch nhau b·ªüi d·∫•u ph·∫©y
KVI_CHANNELS = [int(ch.strip()) for ch in KVI_CHANNELS if ch.strip().isdigit()]
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')  # Th√™m Gemini API key v√†o env

# Tr·∫°ng th√°i theo d√µi KVI cho t·ª´ng k√™nh
kvi_sessions = {}

class KVIHelper:
    def __init__(self, bot):
        self.bot = bot
        if GEMINI_API_KEY:
            genai.configure(api_key=GEMINI_API_KEY)
            self.model = genai.GenerativeModel('gemini-1.5-flash')  # Model free t·ªët nh·∫•t
            print("‚úÖ [GEMINI] Kh·ªüi t·∫°o th√†nh c√¥ng!")
        else:
            self.model = None
            print("‚ö†Ô∏è  C·∫£nh b√°o: Kh√¥ng c√≥ Gemini API key, s·∫Ω s·ª≠ d·ª•ng mock data")
        
    async def parse_karuta_embed(self, embed) -> Optional[Dict]:
        """Ph√¢n t√≠ch embed c·ªßa Karuta ƒë·ªÉ l·∫•y th√¥ng tin KVI"""
        description = embed.description or ""
        
        print("\n" + "="*20 + " PH√ÇN T√çCH EMBED KARUTA " + "="*20)
        print("N·ªôi dung embed nh·∫≠n ƒë∆∞·ª£c:")
        print("----------------------------------------------------")
        print(description)
        print("----------------------------------------------------")
        
        # T√¨m t√™n nh√¢n v·∫≠t
        char_match = re.search(r"Character ¬∑ \*\*([^\*]+)\*\*", description)
        character_name = char_match.group(1).strip() if char_match else None
        
        # T√¨m c√¢u h·ªèi
        question_match = re.search(r'"([^"]*)"', description)
        question = question_match.group(1).strip() if question_match else None
        
        # T√¨m c√°c l·ª±a ch·ªçn
        choices = []
        choice_lines = re.findall(r'^\dÔ∏è‚É£\s+(.+)$', description, re.MULTILINE)
        for i, choice in enumerate(choice_lines, 1):
            choices.append({"number": i, "text": choice.strip()})
        
        if not all([character_name, question, choices]):
            print("‚ùå Kh√¥ng ƒë·ªß th√¥ng tin ƒë·ªÉ ph√¢n t√≠ch")
            return None
            
        print(f"‚úÖ Nh√¢n v·∫≠t: {character_name}")
        print(f"‚úÖ C√¢u h·ªèi: {question}")
        print(f"‚úÖ S·ªë l·ª±a ch·ªçn: {len(choices)}")
        print("="*64)
        
        return {
            "character": character_name,
            "question": question,
            "choices": choices,
            "num_choices": len(choices)
        }
    
    async def analyze_with_ai(self, character: str, question: str, choices: List[Dict]) -> Optional[Dict]:
        """S·ª≠ d·ª•ng Google Gemini ƒë·ªÉ ph√¢n t√≠ch v√† ƒë∆∞a ra c√¢u tr·∫£ l·ªùi t·ªët nh·∫•t"""
        try:
            if not self.model:
                # Fallback v·ªõi mock data n·∫øu kh√¥ng c√≥ API key
                import random
                total = 100
                percentages = []
                for i, choice in enumerate(choices):
                    if i == len(choices) - 1:  # Choice cu·ªëi c√πng
                        percent = total
                    else:
                        percent = random.randint(5, min(70, total - 5 * (len(choices) - i - 1)))
                        total -= percent
                    
                    percentages.append({
                        "choice": choice["number"], 
                        "percentage": percent, 
                        "reasoning": f"Mock analysis for choice {choice['number']}"
                    })
                
                return {
                    "analysis": f"Mock analysis cho nh√¢n v·∫≠t {character}",
                    "percentages": percentages
                }
            
            # T·∫°o prompt cho Gemini
            choices_text = "\n".join([f"{choice['number']}. {choice['text']}" for choice in choices])
            
            prompt = f"""
B·∫°n l√† chuy√™n gia ph√¢n t√≠ch nh√¢n v·∫≠t anime/manga v·ªõi ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ vƒÉn h√≥a Nh·∫≠t B·∫£n v√† c√°c series ph·ªï bi·∫øn.

TH√îNG TIN C·∫¶N PH√ÇN T√çCH:
Nh√¢n v·∫≠t: {character}
C√¢u h·ªèi: "{question}"

C√ÅC L·ª∞A CH·ªåN:
{choices_text}

NHI·ªÜM V·ª§:
1. Ph√¢n t√≠ch t√≠nh c√°ch, t√¨nh hu·ªëng v√† ƒë·∫∑c ƒëi·ªÉm c·ªßa nh√¢n v·∫≠t n√†y d·ª±a tr√™n ki·∫øn th·ª©c anime/manga
2. ƒê√°nh gi√° ƒë·ªô ch√≠nh x√°c c·ªßa t·ª´ng l·ª±a ch·ªçn v·ªõi t·ªïng ph·∫ßn trƒÉm = 100%
3. ƒê∆∞a ra l√Ω do c·ª• th·ªÉ cho m·ªói ƒë√°nh gi√°

QUAN TR·ªåNG: Ch·ªâ tr·∫£ l·ªùi d∆∞·ªõi d·∫°ng JSON h·ª£p l·ªá, kh√¥ng th√™m text n√†o kh√°c:

{{
    "analysis": "Ph√¢n t√≠ch ng·∫Øn g·ªçn v·ªÅ t√≠nh c√°ch nh√¢n v·∫≠t (1-2 c√¢u)",
    "percentages": [
        {{"choice": 1, "percentage": X, "reasoning": "L√Ω do c·ª• th·ªÉ"}},
        {{"choice": 2, "percentage": Y, "reasoning": "L√Ω do c·ª• th·ªÉ"}},
        {{"choice": 3, "percentage": Z, "reasoning": "L√Ω do c·ª• th·ªÉ"}}
    ]
}}"""

            # G·ªçi Gemini API v·ªõi async wrapper
            import asyncio
            
            def sync_generate():
                response = self.model.generate_content(prompt)
                return response.text
            
            # Ch·∫°y sync function trong thread pool
            loop = asyncio.get_event_loop()
            result_text = await loop.run_in_executor(None, sync_generate)
            
            # Parse JSON response
            result_text = result_text.strip()
            
            # Lo·∫°i b·ªè markdown code blocks n·∫øu c√≥
            if result_text.startswith('```json'):
                result_text = result_text[7:]
            if result_text.endswith('```'):
                result_text = result_text[:-3]
            result_text = result_text.strip()
            
            result = json.loads(result_text)
            
            # Validate v√† fix t·ªïng ph·∫ßn trƒÉm n·∫øu c·∫ßn
            total_percent = sum(item["percentage"] for item in result["percentages"])
            if abs(total_percent - 100) > 1:  # Cho ph√©p sai s·ªë 1%
                # ƒêi·ªÅu ch·ªânh ƒë·ªÉ t·ªïng b·∫±ng 100
                diff = 100 - total_percent
                result["percentages"][0]["percentage"] += diff
            
            print(f"‚úÖ [GEMINI] Ph√¢n t√≠ch th√†nh c√¥ng cho {character}")
            print(f"   ‚îî‚îÄ K·∫øt qu·∫£: {[f'{p[\"choice\"]}({p[\"percentage\"]}%)' for p in result['percentages']]}")
            return result
            
        except json.JSONDecodeError as e:
            print(f"‚ùå [GEMINI] L·ªói parse JSON: {e}")
            print(f"Raw response: {result_text if 'result_text' in locals() else 'None'}")
            
            # Fallback v·ªõi mock data
            return await self.analyze_with_ai("", "", choices)  # Recursive v·ªõi model=None
            
        except Exception as e:
            print(f"‚ùå [GEMINI] L·ªói API: {e}")
            
            # Fallback v·ªõi mock data
            import random
            total = 100
            percentages = []
            for i, choice in enumerate(choices):
                if i == len(choices) - 1:
                    percent = total
                else:
                    percent = random.randint(10, min(60, total - 10 * (len(choices) - i - 1)))
                    total -= percent
                
                percentages.append({
                    "choice": choice["number"], 
                    "percentage": percent, 
                    "reasoning": f"Fallback analysis cho choice {choice['number']}"
                })
            
            return {
                "analysis": f"Fallback analysis cho nh√¢n v·∫≠t {character}",
                "percentages": percentages
            }
    
    async def create_suggestion_embed(self, kvi_data: Dict, ai_result: Dict, channel_id: int) -> discord.Embed:
        """T·∫°o embed g·ª£i √Ω gi·ªëng nh∆∞ Hatsune"""
        
        embed = discord.Embed(
            title="ü§ñ Interlink KVI Helper",
            color=0x00ff88  # M√†u xanh l√°
        )
        
        # T·∫°o description v·ªõi c√°c g·ª£i √Ω
        description_lines = []
        description_lines.append(f"**Character:** {kvi_data['character']}")
        description_lines.append(f"**Question:** \"{kvi_data['question']}\"")
        description_lines.append("")
        description_lines.append("**AI Analysis:**")
        description_lines.append(ai_result.get('analysis', 'ƒêang ph√¢n t√≠ch...'))
        description_lines.append("")
        description_lines.append("**Suggestions:**")
        
        # S·∫Øp x·∫øp theo ph·∫ßn trƒÉm gi·∫£m d·∫ßn
        percentages = sorted(ai_result.get('percentages', []), key=lambda x: x['percentage'], reverse=True)
        
        for item in percentages:
            choice_num = item['choice']
            percentage = item['percentage']
            reasoning = item.get('reasoning', '')
            
            # T·∫°o emoji s·ªë
            number_emojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£']
            emoji = number_emojis[choice_num - 1] if choice_num <= len(number_emojis) else f"{choice_num}Ô∏è‚É£"
            
            # T√¨m text c·ªßa choice
            choice_text = next((c['text'] for c in kvi_data['choices'] if c['number'] == choice_num), f"Choice {choice_num}")
            
            description_lines.append(f"{emoji} **{percentage}%** - {choice_text}")
            if reasoning:
                description_lines.append(f"   ‚Ü≥ *{reasoning}*")
        
        embed.description = "\n".join(description_lines)
        
        # Th√™m footer v·ªõi th√¥ng tin k√™nh
        embed.set_footer(text=f"Channel: {channel_id} | Powered by Interlink AI")
        
        return embed
    
    async def handle_kvi_message(self, message):
        """X·ª≠ l√Ω tin nh·∫Øn KVI t·ª´ Karuta"""
        
        # Ki·ªÉm tra xem c√≥ ph·∫£i tin nh·∫Øn KVI kh√¥ng
        if (message.author.id != KARUTA_ID or 
            message.channel.id not in KVI_CHANNELS or 
            not message.embeds):
            return
        
        embed = message.embeds[0]
        description = embed.description or ""
        
        # B·ªè qua tin nh·∫Øn k·∫øt qu·∫£
        if "Your Affection Rating has" in description:
            return
            
        # Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn c√≥ c√¢u h·ªèi (c√≥ 1Ô∏è‚É£)
        if "1Ô∏è‚É£" not in description:
            return
        
        print(f"\n[INTERLINK KVI] Ph√°t hi·ªán c√¢u h·ªèi KVI trong k√™nh {message.channel.id}")
        
        # Ph√¢n t√≠ch embed
        kvi_data = await self.parse_karuta_embed(embed)
        if not kvi_data:
            return
        
        # Ki·ªÉm tra xem c√≥ ph·∫£i c√¢u h·ªèi m·ªõi kh√¥ng
        session_key = f"{message.channel.id}_{message.id}"
        if session_key in kvi_sessions:
            return  # ƒê√£ x·ª≠ l√Ω r·ªìi
        
        # L∆∞u session
        kvi_sessions[session_key] = {
            "message_id": message.id,
            "channel_id": message.channel.id,
            "kvi_data": kvi_data,
            "processed": True
        }
        
        # Ph√¢n t√≠ch v·ªõi AI
        print("[INTERLINK KVI] ƒêang ph√¢n t√≠ch v·ªõi AI...")
        ai_result = await self.analyze_with_ai(
            kvi_data["character"], 
            kvi_data["question"], 
            kvi_data["choices"]
        )
        
        if not ai_result:
            print("[INTERLINK KVI] ‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch v·ªõi AI")
            return
        
        # T·∫°o v√† g·ª≠i embed g·ª£i √Ω
        suggestion_embed = await self.create_suggestion_embed(kvi_data, ai_result, message.channel.id)
        
        try:
            sent_message = await message.channel.send(embed=suggestion_embed)
            print(f"[INTERLINK KVI] ‚úÖ ƒê√£ g·ª≠i g·ª£i √Ω cho c√¢u h·ªèi: {kvi_data['question'][:50]}...")
            
            # L∆∞u message ID ƒë·ªÉ c√≥ th·ªÉ update sau
            kvi_sessions[session_key]["suggestion_message_id"] = sent_message.id
            
        except Exception as e:
            print(f"[INTERLINK KVI] ‚ùå L·ªói khi g·ª≠i embed: {e}")
    
    async def handle_kvi_update(self, before, after):
        """X·ª≠ l√Ω khi tin nh·∫Øn KVI ƒë∆∞·ª£c update"""
        
        if (after.author.id != KARUTA_ID or 
            after.channel.id not in KVI_CHANNELS or 
            not after.embeds):
            return
        
        # T√¨m session t∆∞∆°ng ·ª©ng
        session_key = None
        for key, session in kvi_sessions.items():
            if session["channel_id"] == after.channel.id:
                session_key = key
                break
        
        if not session_key:
            # Tin nh·∫Øn m·ªõi, x·ª≠ l√Ω nh∆∞ b√¨nh th∆∞·ªùng
            await self.handle_kvi_message(after)
            return
        
        embed = after.embeds[0]
        description = embed.description or ""
        
        # N·∫øu l√† c√¢u h·ªèi m·ªõi
        if "1Ô∏è‚É£" in description and "Your Affection Rating has" not in description:
            print(f"[INTERLINK KVI] Ph√°t hi·ªán c√¢u h·ªèi m·ªõi (update) trong k√™nh {after.channel.id}")
            
            # Ph√¢n t√≠ch embed m·ªõi
            kvi_data = await self.parse_karuta_embed(embed)
            if not kvi_data:
                return
            
            # C·∫≠p nh·∫≠t session
            kvi_sessions[session_key]["kvi_data"] = kvi_data
            
            # Ph√¢n t√≠ch v·ªõi AI
            print("[INTERLINK KVI] ƒêang ph√¢n t√≠ch c√¢u h·ªèi m·ªõi v·ªõi AI...")
            ai_result = await self.analyze_with_ai(
                kvi_data["character"], 
                kvi_data["question"], 
                kvi_data["choices"]
            )
            
            if not ai_result:
                return
            
            # T·∫°o embed m·ªõi
            new_embed = await self.create_suggestion_embed(kvi_data, ai_result, after.channel.id)
            
            # Update embed c≈© n·∫øu c√≥
            if "suggestion_message_id" in kvi_sessions[session_key]:
                try:
                    old_message = await after.channel.fetch_message(kvi_sessions[session_key]["suggestion_message_id"])
                    await old_message.edit(embed=new_embed)
                    print(f"[INTERLINK KVI] ‚úÖ ƒê√£ c·∫≠p nh·∫≠t g·ª£i √Ω cho c√¢u h·ªèi m·ªõi")
                except:
                    # N·∫øu kh√¥ng update ƒë∆∞·ª£c th√¨ g·ª≠i m·ªõi
                    sent_message = await after.channel.send(embed=new_embed)
                    kvi_sessions[session_key]["suggestion_message_id"] = sent_message.id
            else:
                # G·ª≠i embed m·ªõi
                sent_message = await after.channel.send(embed=new_embed)
                kvi_sessions[session_key]["suggestion_message_id"] = sent_message.id

    def cleanup_old_sessions(self):
        """D·ªçn d·∫πp c√°c session c≈© ƒë·ªÉ tr√°nh tr√†n RAM"""
        # Gi·ªØ l·∫°i t·ªëi ƒëa 100 sessions g·∫ßn nh·∫•t
        if len(kvi_sessions) > 100:
            # X√≥a 50 session c≈© nh·∫•t
            old_keys = list(kvi_sessions.keys())[:50]
            for key in old_keys:
                del kvi_sessions[key]
            print(f"[INTERLINK KVI] ƒê√£ d·ªçn d·∫πp {len(old_keys)} session c≈©")

# === C√ÅCH S·ª¨ D·ª§NG TRONG BOT CH√çNH ===
"""
# Trong main bot file c·ªßa b·∫°n:

from kvi_support import KVIHelper

class YourBot(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix='!', intents=discord.Intents.all())
        self.kvi_helper = KVIHelper(self)
    
    @commands.Cog.listener()
    async def on_message(self, message):
        await self.kvi_helper.handle_kvi_message(message)
        # C√°c x·ª≠ l√Ω kh√°c c·ªßa bot...
    
    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
        await self.kvi_helper.handle_kvi_update(before, after)
        # C√°c x·ª≠ l√Ω kh√°c c·ªßa bot...
    
    # Th√™m task d·ªçn d·∫πp session (optional)
    @tasks.loop(minutes=30)
    async def cleanup_kvi_sessions(self):
        self.kvi_helper.cleanup_old_sessions()
"""
