# File: kvi_support.py (Fixed version)
import discord
import re
import os
import asyncio
import json
from typing import Optional, List, Dict
import aiohttp

# --- C·∫§U H√åNH ---
KARUTA_ID = 646937666251915264
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ session
kvi_sessions = {}

class KVIHelper:
    def __init__(self, bot):
        self.bot = bot
        self.api_key = GEMINI_API_KEY
        self.http_session = None
        if not self.api_key:
            print("‚ö†Ô∏è [KVI] C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY.")

    async def async_setup(self):
        """T·∫°o HTTP session sau khi bot s·∫µn s√†ng"""
        self.http_session = aiohttp.ClientSession()
        print("‚úÖ [KVI] Aiohttp client session ƒë√£ ƒë∆∞·ª£c t·∫°o.")

    def parse_karuta_embed(self, embed) -> Optional[Dict]:
        """Ph√¢n t√≠ch embed c·ªßa Karuta ƒë·ªÉ l·∫•y th√¥ng tin"""
        description = embed.description or ""
        
        # T√¨m t√™n nh√¢n v·∫≠t
        char_match = re.search(r"Character ¬∑ \*\*([^\*]+)\*\*", description)
        character_name = char_match.group(1).strip() if char_match else None
    
        # T√¨m c√¢u h·ªèi trong d·∫•u ngo·∫∑c k√©p
        question_match = re.search(r'[""]([^""]+)[""]', description)
        question = question_match.group(1).strip() if question_match else None
        
        # T√¨m c√°c l·ª±a ch·ªçn
        choice_lines = re.findall(r'^(1Ô∏è‚É£|2Ô∏è‚É£|3Ô∏è‚É£|4Ô∏è‚É£|5Ô∏è‚É£)\s+(.+)$', description, re.MULTILINE)
        choices = [{"number": int(emoji[0]), "text": text.strip()} for emoji, text in choice_lines]
        
        if not all([character_name, question, choices]):
            return None
            
        return {"character": character_name, "question": question, "choices": choices}

    async def analyze_with_ai(self, character: str, question: str, choices: List[Dict]) -> Optional[Dict]:
        """Ph√¢n t√≠ch b·∫±ng AI ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω"""
        if not self.api_key:
            return None
        
        if not self.http_session:
            await self.async_setup()

        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={self.api_key}"
        
        choices_text = "\n".join([f"{c['number']}. {c['text']}" for c in choices])
        prompt = (
            f"Ph√¢n t√≠ch t√≠nh c√°ch nh√¢n v·∫≠t '{character}' v√† d·ª± ƒëo√°n c√¢u tr·∫£ l·ªùi ph√π h·ª£p nh·∫•t cho c√¢u h·ªèi: '{question}'.\n"
            f"L·ª±a ch·ªçn:\n{choices_text}\n"
            f"Tr·∫£ l·ªùi b·∫±ng JSON: "
            f'{{"analysis":"ph√¢n t√≠ch ng·∫Øn g·ªçn","percentages":[{{"choice":1,"percentage":_}},{{"choice":2,"percentage":_}}]}}'
        )

        payload = {
            "contents": [{
                "parts": [{"text": prompt}]
            }]
        }

        try:
            async with self.http_session.post(url, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    result_text = data["candidates"][0]["content"]["parts"][0]["text"]
                    result_text = result_text.strip().replace("```json", "").replace("```", "").strip()
                    return json.loads(result_text)
                else:
                    return None
        except Exception as e:
            print(f"‚ùå [GEMINI] L·ªói: {e}")
            return None

    async def create_suggestion_embed(self, kvi_data: Dict, ai_result: Dict) -> discord.Embed:
        """T·∫°o embed g·ª£i √Ω ƒë·∫πp v√† ng·∫Øn g·ªçn"""
        embed = discord.Embed(
            title="üéØ KVI Helper", 
            color=0x00ff88,
            description=f"**{kvi_data['character']}**\n*{kvi_data['question']}*"
        )
        
        percentages = sorted(ai_result.get('percentages', []), key=lambda x: x.get('percentage', 0), reverse=True)
        
        suggestions = []
        for item in percentages:
            choice_num = item.get('choice')
            percentage = item.get('percentage')
            if choice_num is None or percentage is None: 
                continue

            emoji = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£'][choice_num - 1]
            choice_text = next((c['text'] for c in kvi_data['choices'] if c['number'] == choice_num), "")
            
            if percentage >= 50:
                suggestions.append(f"{emoji} **{percentage}%** ‚≠ê")
            else:
                suggestions.append(f"{emoji} {percentage}%")
        
        embed.add_field(
            name="üí° G·ª£i √Ω", 
            value="\n".join(suggestions[:3]), 
            inline=False
        )
        
        analysis = ai_result.get('analysis', '')
        if len(analysis) > 100:
            analysis = analysis[:100] + "..."
        
        embed.add_field(
            name="üîç Ph√¢n t√≠ch", 
            value=analysis, 
            inline=False
        )
        
        embed.set_footer(text="ü§ñ Powered by Gemini AI")
        return embed

    async def handle_kvi_message(self, message):
        """X·ª≠ l√Ω tin nh·∫Øn KVI t·ª´ t·∫•t c·∫£ k√™nh"""
        global kvi_sessions
    
        # Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn t·ª´ Karuta c√≥ embed
        if message.author.id != KARUTA_ID or not message.embeds:
            return
    
        embed = message.embeds[0]
        description = embed.description or ""
        
        # B·ªè qua tin nh·∫Øn kh√¥ng ph·∫£i KVI
        if "Your Affection Rating has" in description or "1Ô∏è‚É£" not in description:
            return
    
        # Ph√¢n t√≠ch embed
        kvi_data = self.parse_karuta_embed(embed)
        if not kvi_data:
            return
    
        # Ki·ªÉm tra session ƒë·ªÉ tr√°nh spam
        session = kvi_sessions.get(message.channel.id, {})
        
        if session.get("message_id") == message.id and session.get("last_question") == kvi_data["question"]:
            return
    
        # C·∫≠p nh·∫≠t session
        kvi_sessions[message.channel.id] = {
            "message_id": message.id,
            "last_question": kvi_data["question"]
        }
            
        # Ph√¢n t√≠ch b·∫±ng AI
        ai_result = await self.analyze_with_ai(kvi_data["character"], kvi_data["question"], kvi_data["choices"])
        if not ai_result:
            return
            
        # G·ª≠i g·ª£i √Ω
        suggestion_embed = await self.create_suggestion_embed(kvi_data, ai_result)
        try:
            await message.channel.send(embed=suggestion_embed)
            print(f"‚úÖ [KVI] ƒê√£ g·ª≠i g·ª£i √Ω cho {kvi_data['character']}")
        except Exception as e:
            print(f"‚ùå [KVI] L·ªói g·ª≠i embed: {e}")
