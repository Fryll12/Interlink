# File: kvi_support.py - Clean version kh√¥ng l·ªói
import discord
import re
import os
import asyncio
import json
from typing import Optional, List, Dict
import aiohttp

# --- C·∫§U H√åNH ---
KARUTA_ID = 646937666251915264
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

class KVIHelper:
    def __init__(self, bot):
        self.bot = bot
        self.api_key = GEMINI_API_KEY
        self.http_session = None
        self.kvi_sessions = {}
        if not self.api_key:
            print("‚ö†Ô∏è [KVI] C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY.")

    async def async_setup(self):
        """T·∫°o HTTP session sau khi bot s·∫µn s√†ng"""
        if not self.http_session:
            self.http_session = aiohttp.ClientSession()
            print("‚úÖ [KVI] HTTP session ƒë√£ s·∫µn s√†ng.")

    def parse_karuta_embed(self, embed) -> Optional[Dict]:
        """Ph√¢n t√≠ch embed c·ªßa Karuta ƒë·ªÉ l·∫•y th√¥ng tin"""
        try:
            description = embed.description or ""
            
            # T√¨m t√™n nh√¢n v·∫≠t
            char_match = re.search(r"Character ¬∑ \*\*([^\*]+)\*\*", description)
            character_name = char_match.group(1).strip() if char_match else None
        
            # T√¨m c√¢u h·ªèi trong d·∫•u ngo·∫∑c k√©p
            question_match = re.search(r'[""]([^""]+)[""]', description)
            question = question_match.group(1).strip() if question_match else None
            
            # T√¨m c√°c l·ª±a ch·ªçn
            choice_lines = re.findall(r'^(1Ô∏è‚É£|2Ô∏è‚É£|3Ô∏è‚É£|4Ô∏è‚É£|5Ô∏è‚É£)\s+(.+)$', description, re.MULTILINE)
            choices = [{"number": int(emoji[0]), "text": text.strip()} for emoji, text in choice_lines]
            
            if not all([character_name, question, choices]):
                return None
                
            return {"character": character_name, "question": question, "choices": choices}
        except Exception as e:
            print(f"‚ùå [PARSER] L·ªói: {e}")
            return None

    async def analyze_with_ai(self, character: str, question: str, choices: List[Dict]) -> Optional[Dict]:
        """Ph√¢n t√≠ch b·∫±ng AI"""
        if not self.api_key:
            return None
        
        if not self.http_session:
            await self.async_setup()

        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={self.api_key}"
        
        choices_text = "\n".join([f"{c['number']}. {c['text']}" for c in choices])
        prompt = (
            f"Ph√¢n t√≠ch t√≠nh c√°ch '{character}' v√† tr·∫£ l·ªùi c√¢u h·ªèi: '{question}'\n"
            f"L·ª±a ch·ªçn:\n{choices_text}\n"
            f'JSON: {{"analysis":"ph√¢n t√≠ch ng·∫Øn","percentages":[{{"choice":1,"percentage":50}}]}}'
        )

        payload = {"contents": [{"parts": [{"text": prompt}]}]}

        try:
            async with self.http_session.post(url, json=payload, timeout=8) as response:
                if response.status == 200:
                    data = await response.json()
                    result_text = data["candidates"][0]["content"]["parts"][0]["text"]
                    result_text = result_text.strip().replace("```json", "").replace("```", "").strip()
                    return json.loads(result_text)
                else:
                    return None
        except Exception as e:
            print(f"‚ùå [AI] L·ªói: {e}")
            return None

    async def create_suggestion_embed(self, kvi_data: Dict, ai_result: Dict) -> discord.Embed:
        """T·∫°o embed g·ª£i √Ω"""
        embed = discord.Embed(
            title="üéØ KVI Helper", 
            color=0x00ff88,
            description=f"**{kvi_data['character']}**\n*{kvi_data['question']}*"
        )
        
        percentages = sorted(ai_result.get('percentages', []), key=lambda x: x.get('percentage', 0), reverse=True)
        
        suggestions = []
        for item in percentages[:3]:
            choice_num = item.get('choice')
            percentage = item.get('percentage')
            if choice_num is None or percentage is None: 
                continue

            emoji = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£'][choice_num - 1]
            choice_text = next((c['text'] for c in kvi_data['choices'] if c['number'] == choice_num), "")
            
            if choice_text:
                if percentage >= 50:
                    suggestions.append(f"{emoji} **{percentage}%** ‚≠ê")
                else:
                    suggestions.append(f"{emoji} {percentage}%")
        
        if suggestions:
            embed.add_field(name="üí° G·ª£i √Ω", value="\n".join(suggestions), inline=False)
        
        analysis = ai_result.get('analysis', '')[:80]
        if analysis:
            embed.add_field(name="üîç Ph√¢n t√≠ch", value=analysis, inline=False)
        
        embed.set_footer(text="ü§ñ Gemini AI")
        return embed


    async def handle_kvi_message(self, message):
        print(f"\n[DEBUG] Step 1: Bot nh√¨n th·∫•y tin nh·∫Øn t·ª´ '{message.author.name}'.")
    
        # Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn t·ª´ Karuta
        if message.author.id != KARUTA_ID:
            return
    
        try:
            # Ch·ªù v√† t·∫£i l·∫°i tin nh·∫Øn ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ embed
            await asyncio.sleep(1)
            message = await message.channel.fetch_message(message.id)
        except Exception as e:
            print(f"‚ùå [DEBUG] L·ªói ·ªü Step 1.5 (t·∫£i l·∫°i tin nh·∫Øn): {e}")
            return
    
        # B√¢y gi·ªù, ti·∫øp t·ª•c x·ª≠ l√Ω
        if not message.embeds:
            return 
        print("[DEBUG] Step 2: Tin nh·∫Øn l√† c·ªßa Karuta v√† c√≥ embed.")
        
        embed = message.embeds[0]
        description = embed.description or ""
        
        if "Your Affection Rating has" in description or "1Ô∏è‚É£" not in description:
            return
        print("[DEBUG] Step 3: Tin nh·∫Øn l√† m·ªôt c√¢u h·ªèi KVI h·ª£p l·ªá.")
    
        kvi_data = self.parse_karuta_embed(embed)
        if not kvi_data:
            print("[DEBUG] Tho√°t: Ph√¢n t√≠ch embed th·∫•t b·∫°i.")
            return
        print("[DEBUG] Step 4: Ph√¢n t√≠ch embed th√†nh c√¥ng.")
    
        session = self.kvi_sessions.get(message.channel.id, {})
        if session.get("message_id") == message.id and session.get("last_question") == kvi_data["question"]:
            print("[DEBUG] Tho√°t: B·ªè qua s·ª± ki·ªán tr√πng l·∫∑p cho c√πng m·ªôt c√¢u h·ªèi.")
            return
        print("[DEBUG] Step 5: Ph√°t hi·ªán c√¢u h·ªèi m·ªõi, c·∫≠p nh·∫≠t session.")
    
        self.kvi_sessions[message.channel.id] = {
            "message_id": message.id,
            "last_question": kvi_data["question"]
        }
            
        print("[DEBUG] Step 6: ƒêang g·ªçi AI ƒë·ªÉ ph√¢n t√≠ch...")
        ai_result = await self.analyze_with_ai(kvi_data["character"], kvi_data["question"], kvi_data["choices"])
        if not ai_result:
            print("[DEBUG] Tho√°t: AI ph√¢n t√≠ch th·∫•t b·∫°i ho·∫∑c kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£.")
