# File: kvi_support.py (Phi√™n b·∫£n Google Gemini - S·ª≠a l·ªói v√† t·ªëi ∆∞u h√≥a)
import discord
import re
import os
import asyncio
import json
from typing import Optional, List, Dict
import aiohttp # S·ª≠ d·ª•ng aiohttp ƒë·ªÉ g·ªçi API b·∫•t ƒë·ªìng b·ªô

# --- C·∫§U H√åNH ---
KARUTA_ID = 646937666251915264
KVI_CHANNELS_STR = os.getenv('KVI_CHANNELS', '')
KVI_CHANNELS = [int(ch.strip()) for ch in KVI_CHANNELS_STR.split(',') if ch.strip().isdigit()]
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY') # ƒê·ªïi t√™n bi·∫øn m√¥i tr∆∞·ªùng cho nh·∫•t qu√°n

# --- LOGIC CH√çNH ---
# D√°n to√†n b·ªô class n√†y v√†o kvi_support.py, thay th·∫ø cho class c≈©

class KVIHelper:
    def __init__(self, bot):
        self.bot = bot
        self.api_key = GEMINI_API_KEY
        # THAY ƒê·ªîI 1: Kh·ªüi t·∫°o l√† None, s·∫Ω t·∫°o sau
        self.http_session = None
        if not self.api_key:
            print("‚ö†Ô∏è [KVI] C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY.")

    async def async_setup(self):
        """
        H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi sau khi bot ƒë√£ s·∫µn s√†ng.
        N√≥ t·∫°o ra ClientSession m·ªôt c√°ch an to√†n.
        """
        self.http_session = aiohttp.ClientSession()
        print("‚úÖ [KVI] Aiohttp client session ƒë√£ ƒë∆∞·ª£c t·∫°o.")

    def parse_karuta_embed(self, embed) -> Optional[Dict]:
        """
        Ph√¢n t√≠ch embed c·ªßa Karuta ƒë·ªÉ l·∫•y th√¥ng tin.
        *** ƒê√É N√ÇNG C·∫§P THEO CODE THAM KH·∫¢O C·ª¶A B·∫†N ***
        """
        description = embed.description or ""
        
        # T√¨m t√™n nh√¢n v·∫≠t
        char_match = re.search(r"Character ¬∑ \*\*([^\*]+)\*\*", description)
        character_name = char_match.group(1).strip() if char_match else None
    
        # T√¨m c√¢u h·ªèi trong d·∫•u ngo·∫∑c k√©p ‚Äú...‚Äù ho·∫∑c "..."
        question_match = re.search(r'["‚Äú]([^"‚Äù]+)["‚Äù]', description)
        question = question_match.group(1).strip() if question_match else None
        
        # T√¨m t·∫•t c·∫£ c√°c d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng emoji s·ªë v√† l·∫•y n·ªôi dung (Logic m·ªõi, ch√≠nh x√°c h∆°n)
        choice_lines = re.findall(r'^(1Ô∏è‚É£|2Ô∏è‚É£|3Ô∏è‚É£|4Ô∏è‚É£|5Ô∏è‚É£)\s+(.+)$', description, re.MULTILINE)
        
        choices = [{"number": int(emoji[0]), "text": text.strip()} for emoji, text in choice_lines]
        
        if not all([character_name, question, choices]):
            print("‚ùå [PARSER] Kh√¥ng ƒë·ªß th√¥ng tin ƒë·ªÉ ph√¢n t√≠ch embed c·ªßa Karuta.")
            return None
            
        return {"character": character_name, "question": question, "choices": choices}

    async def analyze_with_ai(self, character: str, question: str, choices: List[Dict]) -> Optional[Dict]:
        # ... (H√†m n√†y gi·ªØ nguy√™n, kh√¥ng c·∫ßn thay ƒë·ªïi) ...
        if not self.api_key:
            print("L·ªói: AI Model ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh v√¨ thi·∫øu API key.")
            return None
        
        # THAY ƒê·ªîI 2: ƒê·∫£m b·∫£o session ƒë√£ ƒë∆∞·ª£c t·∫°o
        if not self.http_session:
            await self.async_setup()

        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={self.api_key}"
        
        choices_text = "\n".join([f"{c['number']}. {c['text']}" for c in choices])
        prompt = (
            f"You are an expert anime character analyst. Analyze the personality of '{character}'. "
            f"Based on their personality, determine the most likely correct answer to the question: '{question}'.\n"
            f"Choices:\n{choices_text}\n"
            f"Respond ONLY with a valid JSON object in the format: "
            f'{{"analysis":"brief analysis","percentages":[{{"choice":1,"percentage":_}},{{"choice":2,"percentage":_}}]}}'
        )

        payload = {
            "contents": [{
                "parts": [{"text": prompt}]
            }]
        }

        try:
            print("[INTERLINK KVI] ƒêang g·ª≠i y√™u c·∫ßu t·ªõi Google Gemini...")
            async with self.http_session.post(url, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    result_text = data["candidates"][0]["content"]["parts"][0]["text"]
                    result_text = result_text.strip().replace("```json", "").replace("```", "").strip()
                    print("‚úÖ [GEMINI] Ph√¢n t√≠ch th√†nh c√¥ng!")
                    return json.loads(result_text)
                else:
                    error_text = await response.text()
                    print(f"‚ùå [GEMINI] L·ªói API ({response.status}): {error_text}")
                    return None
        except Exception as e:
            print(f"‚ùå [GEMINI] L·ªói k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω: {e}")
            return None

    async def create_suggestion_embed(self, kvi_data: Dict, ai_result: Dict) -> discord.Embed:
        # ... (H√†m n√†y gi·ªØ nguy√™n, kh√¥ng c·∫ßn thay ƒë·ªïi) ...
        embed = discord.Embed(title="ü§ñ Interlink KVI Helper (Google AI)", color=0x4285F4)
        description_lines = [
            f"**Character:** {kvi_data['character']}",
            f"**Question:** \"{kvi_data['question']}\"",
            "",
            "**AI Analysis:**",
            ai_result.get('analysis', 'ƒêang ph√¢n t√≠ch...'),
            "",
            "**Suggestions:**"
        ]
        
        percentages = sorted(ai_result.get('percentages', []), key=lambda x: x.get('percentage', 0), reverse=True)
        
        for item in percentages:
            choice_num = item.get('choice')
            percentage = item.get('percentage')
            if choice_num is None or percentage is None: continue

            emoji = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£'][choice_num - 1]
            choice_text = next((c['text'] for c in kvi_data['choices'] if c['number'] == choice_num), "")
            description_lines.append(f"{emoji} **{percentage}%** - {choice_text}")
        
        embed.description = "\n".join(description_lines)
        embed.set_footer(text="Powered by Google Gemini")
        return embed


    async def handle_kvi_message(self, message):
        # D√íNG M·ªöI: Khai b√°o ƒë·ªÉ s·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c
        global kvi_sessions
    
        # C√°c b∆∞·ªõc ki·ªÉm tra ban ƒë·∫ßu
        if message.author.id != KARUTA_ID or message.channel.id not in KVI_CHANNELS or not message.embeds:
            return
    
        embed = message.embeds[0]
        description = embed.description or ""
        if "Your Affection Rating has" in description or "1Ô∏è‚É£" not in description:
            return
    
        # Ph√¢n t√≠ch embed ƒë·ªÉ l·∫•y d·ªØ li·ªáu
        kvi_data = self.parse_karuta_embed(embed)
        if not kvi_data:
            return
    
        # --- LOGIC X·ª¨ L√ù PHI√äN M·ªöI (ƒê√É N√ÇNG C·∫§P) ---
        # L·∫•y session c·ªßa k√™nh n√†y
        session = kvi_sessions.get(message.channel.id, {})
        
        # N·∫øu tin nh·∫Øn n√†y c√≥ c√πng ID V√Ä c√πng n·ªôi dung c√¢u h·ªèi, th√¨ b·ªè qua
        if session.get("message_id") == message.id and session.get("last_question") == kvi_data["question"]:
            return # ƒê√¢y l√† m·ªôt l·∫ßn edit nh·ªè (v√≠ d·ª• c√≥ ng∆∞·ªùi react), kh√¥ng ph·∫£i c√¢u h·ªèi m·ªõi
    
        # N·∫øu kh√¥ng, c·∫≠p nh·∫≠t session v·ªõi c√¢u h·ªèi m·ªõi v√† ti·∫øp t·ª•c
        print(f"\n[INTERLINK KVI] Ph√°t hi·ªán c√¢u h·ªèi KVI m·ªõi trong k√™nh {message.channel.id}")
        kvi_sessions[message.channel.id] = {
            "message_id": message.id,
            "last_question": kvi_data["question"]
        }
        # --- K·∫æT TH√öC LOGIC M·ªöI ---
            
        ai_result = await self.analyze_with_ai(kvi_data["character"], kvi_data["question"], kvi_data["choices"])
        if not ai_result:
            return
            
        suggestion_embed = await self.create_suggestion_embed(kvi_data, ai_result)
        try:
            await message.channel.send(embed=suggestion_embed)
            print(f"‚úÖ ƒê√£ g·ª≠i g·ª£i √Ω t·ª´ Google Gemini.")
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i embed g·ª£i √Ω: {e}")
